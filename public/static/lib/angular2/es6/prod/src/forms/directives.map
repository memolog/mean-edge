{"version":3,"sources":["directives.js"],"names":[],"mappings":"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","file":"angular2/src/forms/directives.es6","sourcesContent":["import {Directive, onChange} from 'angular2/src/core/annotations_impl/annotations';\nimport {Ancestor} from 'angular2/src/core/annotations_impl/visibility';\nimport {ElementRef} from 'angular2/src/core/compiler/element_ref';\nimport {Optional} from 'angular2/src/di/annotations_impl';\nimport {Renderer} from 'angular2/src/render/api';\nimport {isPresent, isString, CONST_EXPR} from 'angular2/src/facade/lang';\nimport {ListWrapper} from 'angular2/src/facade/collection';\nimport {ControlGroup} from './model';\nimport {Validators} from './validators';\n\n//export interface ControlValueAccessor {\n//  writeValue(value):void{}\n//  set onChange(fn){}\n//}\n\n/**\n * The default accessor for writing a value and listening to changes that is used by a {@link Control} directive.\n *\n * This is the default strategy that Angular uses when no other accessor is applied.\n *\n *  # Example\n *  ```\n *  <input type=\"text\" [control]=\"loginControl\">\n *  ```\n *\n * @exportedAs angular2/forms\n */\n@Directive({\n  selector: '[control]',\n  hostListeners: {\n    'change' : 'onChange($event.target.value)',\n    'input' : 'onChange($event.target.value)'\n  },\n  hostProperties: {\n    'value' : 'value'\n  }\n})\nexport class DefaultValueAccessor {\n  value;\n  onChange:Function;\n\n  constructor() {\n    this.onChange = (_) => {};\n  }\n\n  writeValue(value) {\n    this.value = value\n  }\n}\n\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n *\n *  # Example\n *  ```\n *  <input type=\"checkbox\" [control]=\"rememberLogin\">\n *  ```\n *\n * @exportedAs angular2/forms\n */\n@Directive({\n  selector: 'input[type=checkbox][control]',\n  hostListeners: {\n    'change' : 'onChange($event.target.checked)'\n  },\n  hostProperties: {\n    'checked' : 'checked'\n  }\n})\nexport class CheckboxControlValueAccessor {\n  _elementRef:ElementRef;\n  _renderer:Renderer;\n\n  checked:boolean;\n  onChange:Function;\n\n  constructor(cd:ControlDirective, elementRef:ElementRef, renderer:Renderer) {\n    this.onChange = (_) => {};\n    this._elementRef = elementRef;\n    this._renderer = renderer;\n    cd.valueAccessor = this; //ControlDirective should inject CheckboxControlDirective\n  }\n\n  writeValue(value) {\n    this._renderer.setElementProperty(this._elementRef.parentView.render, this._elementRef.boundElementIndex,\n      'checked', value)\n  }\n}\n\n/**\n * Binds a control to a DOM element.\n *\n * # Example\n *\n * In this example, we bind the control to an input element. When the value of the input element changes, the value of\n * the control will reflect that change. Likewise, if the value of the control changes, the input element reflects that\n * change.\n *\n * Here we use {@link formDirectives}, rather than importing each form directive individually, e.g.\n * `ControlDirective`, `ControlGroupDirective`. This is just a shorthand for the same end result.\n *\n *  ```\n * @Component({selector: \"login-comp\"})\n * @View({\n *      directives: [formDirectives],\n *      inline: \"<input type='text' [control]='loginControl'>\"\n *      })\n * class LoginComp {\n *  loginControl:Control;\n *\n *  constructor() {\n *    this.loginControl = new Control('');\n *  }\n * }\n *\n *  ```\n *\n * @exportedAs angular2/forms\n */\n@Directive({\n  lifecycle: [onChange],\n  selector: '[control]',\n  properties: {\n    'controlOrName' : 'control'\n  }\n})\nexport class ControlDirective {\n  _groupDirective:ControlGroupDirective;\n\n  controlOrName:any;\n  valueAccessor:any; //ControlValueAccessor\n\n  validator:Function;\n\n  constructor(@Optional() @Ancestor() groupDirective:ControlGroupDirective, valueAccessor:DefaultValueAccessor)  {\n    this._groupDirective = groupDirective;\n    this.controlOrName = null;\n    this.valueAccessor = valueAccessor;\n    this.validator = Validators.nullValidator;\n  }\n\n  // TODO: vsavkin this should be moved into the constructor once static bindings\n  // are implemented\n  onChange(_) {\n    this._initialize();\n  }\n\n  _initialize() {\n    if(isPresent(this._groupDirective)) {\n      this._groupDirective.addDirective(this);\n    }\n\n    var c = this._control();\n    c.validator = Validators.compose([c.validator, this.validator]);\n\n    this._updateDomValue();\n    this._setUpUpdateControlValue();\n  }\n\n  _updateDomValue() {\n    this.valueAccessor.writeValue(this._control().value);\n  }\n\n  _setUpUpdateControlValue() {\n    this.valueAccessor.onChange = (newValue) => this._control().updateValue(newValue);\n  }\n\n  _control() {\n    if (isString(this.controlOrName)) {\n      return this._groupDirective.findControl(this.controlOrName);\n    } else {\n      return this.controlOrName;\n    }\n  }\n}\n\n/**\n * Binds a control group to a DOM element.\n *\n * # Example\n *\n * In this example, we bind the control group to the form element, and we bind the login and password controls to the\n * login and password elements.\n *\n * Here we use {@link formDirectives}, rather than importing each form directive individually, e.g.\n * `ControlDirective`, `ControlGroupDirective`. This is just a shorthand for the same end result.\n *\n *  ```\n * @Component({selector: \"login-comp\"})\n * @View({\n *      directives: [formDirectives],\n *      inline: \"<form [control-group]='loginForm'>\" +\n *              \"Login <input type='text' control='login'>\" +\n *              \"Password <input type='password' control='password'>\" +\n *              \"<button (click)=\"onLogin()\">Login</button>\" +\n *              \"</form>\"\n *      })\n * class LoginComp {\n *  loginForm:ControlGroup;\n *\n *  constructor() {\n *    this.loginForm = new ControlGroup({\n *      login: new Control(\"\"),\n *      password: new Control(\"\")\n *    });\n *  }\n *\n *  onLogin() {\n *    // this.loginForm.value\n *  }\n * }\n *\n *  ```\n *\n * @exportedAs angular2/forms\n */\n@Directive({\n  selector: '[control-group]',\n  properties: {\n    'controlGroup' : 'control-group'\n  }\n})\nexport class ControlGroupDirective {\n  _groupDirective:ControlGroupDirective;\n  _controlGroupName:string;\n\n  _controlGroup:ControlGroup;\n  _directives:List<ControlDirective>;\n\n  constructor(@Optional() @Ancestor() groupDirective:ControlGroupDirective) {\n    this._groupDirective = groupDirective;\n    this._directives = ListWrapper.create();\n  }\n\n  set controlGroup(controlGroup) {\n    if (isString(controlGroup)) {\n      this._controlGroupName = controlGroup;\n    } else {\n      this._controlGroup = controlGroup;\n    }\n    this._updateDomValue();\n  }\n\n  _updateDomValue() {\n    ListWrapper.forEach(this._directives, (cd) => cd._updateDomValue());\n  }\n\n  addDirective(c:ControlDirective) {\n    ListWrapper.push(this._directives, c);\n  }\n\n  findControl(name:string):any {\n    return this._getControlGroup().controls[name];\n  }\n\n  _getControlGroup():ControlGroup {\n    if (isPresent(this._controlGroupName)) {\n      return this._groupDirective.findControl(this._controlGroupName)\n    } else {\n      return this._controlGroup;\n    }\n  }\n}\n\n/**\n *\n * A list of all the form directives used as part of a `@View` annotation.\n *\n *  This is a shorthand for importing them each individually.\n *\n * @exportedAs angular2/forms\n */\nexport const formDirectives:List = CONST_EXPR([\n  ControlGroupDirective, ControlDirective, CheckboxControlValueAccessor, DefaultValueAccessor\n]);\n"]}