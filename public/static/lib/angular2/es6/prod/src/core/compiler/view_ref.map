{"version":3,"sources":["view_ref.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,SAAQ,CAAC,KAAO,2BAAyB,CAAC;AAClD,UAAY,WAAS,CAAA,IAAO,SAAO,CAAC;AACpC,KAAO,EAAC,aAAY,CAAC,KAAO,0BAAwB,CAAC;AAGrD,KAAO,SAAS,aAAW,CAAE,OAAM,AAAQ,CAAG;AAC5C,OAAO,CAAA,OAAM,MAAM,CAAC;AACtB;AAAA,AAPA,KAAK,eAAe,AAAC,4BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAIW,OAAM,GAJM;EAAC,CAAC,CAAC,CAAC;AASrD,KAAO,SAAS,kBAAgB,CAAE,YAAW,AAAa,CAAG;AAC3D,OAAO,CAAA,SAAQ,AAAC,CAAC,YAAW,CAAC,CAAA,CAAI,CAAA,YAAW,WAAW,EAAI,KAAG,CAAC;AACjE;AAAA,AAZA,KAAK,eAAe,AAAC,iCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YASqB,YAAW,GATT;EAAC,CAAC,CAAC,CAAC;AAgBrD,KAAO,MAAM,QAAM;AAGjB,YAAU,CAAE,IAAG,AAAmB,CAAG;AACnC,OAAG,MAAM,EAAI,KAAG,CAAC;EACnB;AAAA,AAEA,IAAI,OAAK,EAAkB;AACzB,SAAO,CAAA,IAAG,MAAM,OAAO,CAAC;EAC1B;AAAA,AAEA,SAAO,CAAE,WAAU,AAAQ,CAAG,CAAA,KAAI,AAAI,CAAG;AACvC,OAAG,MAAM,SAAS,AAAC,CAAC,WAAU,CAAG,MAAI,CAAC,CAAC;EACzC;AAAA,AACF;AAAA,AA/BA,KAAK,eAAe,AAAC,uBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAmBP,UAAS,QAAQ,GAnBa;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,0CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,MAAK,KAAgB,WAArB,MAAK,KAAgB,OAC4B;EAAC,CAAC,CAAC,CAAC;AAmCrD,KAAO,MAAM,aAAW;AAGtB,YAAU,CAAE,SAAQ,CAAG;AACrB,OAAG,WAAW,EAAI,UAAQ,CAAC;EAC7B;AAAA,AACF;AAAA","file":"angular2/src/core/compiler/view_ref.es6","sourcesContent":["import {isPresent} from 'angular2/src/facade/lang';\nimport * as viewModule from './view';\nimport {RenderViewRef} from 'angular2/src/render/api';\n\n// This is a workaround for privacy in Dart as we don't have library parts\nexport function internalView(viewRef:ViewRef) {\n  return viewRef._view;\n}\n\n// This is a workaround for privacy in Dart as we don't have library parts\nexport function internalProtoView(protoViewRef:ProtoViewRef) {\n  return isPresent(protoViewRef) ? protoViewRef._protoView : null;\n}\n\n/**\n * @exportedAs angular2/view\n */\nexport class ViewRef {\n  _view:viewModule.AppView;\n\n  constructor(view:viewModule.AppView) {\n    this._view = view;\n  }\n\n  get render():RenderViewRef {\n    return this._view.render;\n  }\n\n  setLocal(contextName: string, value:any) {\n    this._view.setLocal(contextName, value);\n  }\n}\n\n/**\n * @exportedAs angular2/view\n */\nexport class ProtoViewRef {\n  _protoView:viewModule.AppProtoView;\n\n  constructor(protoView) {\n    this._protoView = protoView;\n  }\n}\n"]}