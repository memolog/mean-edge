{"version":3,"sources":["ng_zone.es6"],"names":[],"mappings":"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","file":"angular2/src/core/zone/ng_zone.es6","sourcesContent":["import {List, ListWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\nimport {normalizeBlank, isPresent, global} from 'angular2/src/facade/lang';\n\n/**\n * A wrapper around zones that lets you schedule tasks after it has executed a task.\n *\n * The wrapper maintains an \"inner\" and an \"mount\" `Zone`. The application code will executes\n * in the \"inner\" zone unless `runOutsideAngular` is explicitely called.\n *\n * A typical application will create a singleton `NgZone`. The outer `Zone` is a fork of the root\n * `Zone`. The default `onTurnDone` runs the Angular change detection.\n *\n * @exportedAs angular2/core\n */\nexport class NgZone {\n  // Code executed in _mountZone does not trigger the onTurnDone.\n  _mountZone;\n  // _innerZone is the child of _mountZone. Any code executed in this zone will trigger the\n  // onTurnDone hook at the end of the current VM turn.\n  _innerZone;\n\n  _onTurnStart:Function;\n  _onTurnDone:Function;\n  _onErrorHandler:Function;\n\n  // Number of microtasks pending from _innerZone (& descendants)\n  _pendingMicrotask: number;\n  // Whether some code has been executed in the _innerZone (& descendants) in the current turn\n  _hasExecutedCodeInInnerZone: boolean;\n  // run() call depth in _mountZone. 0 at the end of a macrotask\n  // zone.run(() => {         // top-level call\n  //   zone.run(() => {});    // nested call -> in-turn\n  // });\n  _nestedRun: number;\n\n  /**\n   * Associates with this\n   *\n   * - a \"root\" zone, which the one that instantiated this.\n   * - an \"inner\" zone, which is a child of the root zone.\n   *\n   * @param {bool} enableLongStackTrace whether to enable long stack trace. They should only be\n   *               enabled in development mode as they significantly impact perf.\n   */\n  constructor({enableLongStackTrace}) {\n    this._onTurnStart = null;\n    this._onTurnDone = null;\n    this._onErrorHandler = null;\n\n    this._pendingMicrotasks = 0;\n    this._hasExecutedCodeInInnerZone = false;\n    this._nestedRun = 0;\n\n    this._mountZone = global.zone;\n    this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace)\n  }\n\n  /**\n   * Initializes the zone hooks.\n   *\n   * @param {Function} onTurnStart called before code executes in the inner zone for each VM turn\n   * @param {Function} onTurnDone called at the end of a VM turn if code has executed in the inner zone\n   * @param {Function} onErrorHandler called when an exception is thrown by a macro or micro task\n   */\n  initCallbacks({onTurnStart, onTurnDone, onErrorHandler} = {}) {\n    this._onTurnStart = normalizeBlank(onTurnStart);\n    this._onTurnDone = normalizeBlank(onTurnDone);\n    this._onErrorHandler = normalizeBlank(onErrorHandler);\n  }\n\n  /**\n   * Runs `fn` in the inner zone and returns whatever it returns.\n   *\n   * In a typical app where the inner zone is the Angular zone, this allows one to make use of the\n   * Angular's auto digest mechanism.\n   *\n   * ```\n   * var zone: NgZone = [ref to the application zone];\n   *\n   * zone.run(() => {\n   *   // the change detection will run after this function and the microtasks it enqueues have executed.\n   * });\n   * ```\n   */\n  run(fn) {\n    return this._innerZone.run(fn);\n  }\n\n  /**\n   * Runs `fn` in the outer zone and returns whatever it returns.\n   *\n   * In a typical app where the inner zone is the Angular zone, this allows one to escape Angular's\n   * auto-digest mechanism.\n   *\n   * ```\n   * var zone: NgZone = [ref to the application zone];\n   *\n   * zone.runOusideAngular(() => {\n   *   element.onClick(() => {\n   *     // Clicking on the element would not trigger the change detection\n   *   });\n   * });\n   * ```\n   */\n  runOutsideAngular(fn) {\n    return this._mountZone.run(fn);\n  }\n\n  _createInnerZone(zone, enableLongStackTrace) {\n    var ngZone = this;\n    var errorHandling;\n\n    if (enableLongStackTrace) {\n      errorHandling = StringMapWrapper.merge(Zone.longStackTraceZone, {\n        onError: function (e) {\n          ngZone._onError(this, e)\n        }\n      });\n    } else {\n      errorHandling = {\n        onError: function (e) {\n          ngZone._onError(this, e)\n        }\n      };\n    }\n\n    return zone\n        .fork(errorHandling)\n        .fork({\n          '$run': function(parentRun) {\n            return function() {\n              try {\n                ngZone._nestedRun++;\n                if (!ngZone._hasExecutedCodeInInnerZone) {\n                  ngZone._hasExecutedCodeInInnerZone = true;\n                  if (ngZone._onTurnStart) {\n                    parentRun.call(ngZone._innerZone, ngZone._onTurnStart);\n                  }\n                }\n                return parentRun.apply(this, arguments);\n              } finally {\n                ngZone._nestedRun--;\n                // If there are no more pending microtasks, we are at the end of a VM turn (or in onTurnStart)\n                // _nestedRun will be 0 at the end of a macrotasks (it could be > 0 when there are nested calls\n                // to run()).\n                if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0) {\n                  if (ngZone._onTurnDone && ngZone._hasExecutedCodeInInnerZone) {\n                    try {\n                      parentRun.call(ngZone._innerZone, ngZone._onTurnDone);\n                    } finally {\n                      ngZone._hasExecutedCodeInInnerZone = false;\n                    }\n                  }\n                }\n              }\n            }\n          },\n          '$scheduleMicrotask': function(parentScheduleMicrotask) {\n            return function(fn) {\n              ngZone._pendingMicrotasks++;\n              var microtask = function() {\n                try {\n                  fn();\n                } finally {\n                  ngZone._pendingMicrotasks--;\n                }\n              };\n              parentScheduleMicrotask.call(this, microtask);\n            }\n          },\n          _innerZone: true\n        });\n  }\n\n  _onError(zone, e): void {\n    if (isPresent(this._onErrorHandler)) {\n      var trace = [normalizeBlank(e.stack)];\n\n      while (zone && zone.constructedAtException) {\n        trace.push(zone.constructedAtException.get());\n        zone = zone.parent;\n      }\n      this._onErrorHandler(e, trace);\n    } else {\n      console.log('## _onError ##');\n      console.log(e.stack);\n      throw e;\n    }\n  }\n}\n"]}