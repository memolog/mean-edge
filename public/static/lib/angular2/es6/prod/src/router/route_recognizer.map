{"version":3,"sources":["route_recognizer.js"],"names":[],"mappings":"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","file":"angular2/src/router/route_recognizer.es6","sourcesContent":["import {RegExp, RegExpWrapper, StringWrapper, isPresent} from 'angular2/src/facade/lang';\nimport {Map, MapWrapper, List, ListWrapper, StringMap, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {PathRecognizer} from './path_recognizer';\n\nexport class RouteRecognizer {\n  names:Map<string, PathRecognizer>;\n  redirects:Map<string, string>;\n  matchers:Map<RegExp, PathRecognizer>;\n\n  constructor() {\n    this.names = MapWrapper.create();\n    this.matchers = MapWrapper.create();\n    this.redirects = MapWrapper.create();\n  }\n\n  addRedirect(path:string, target:string) {\n    MapWrapper.set(this.redirects, path, target);\n  }\n\n  addConfig(path:string, handler:any, alias:string = null) {\n    var recognizer = new PathRecognizer(path, handler);\n    MapWrapper.set(this.matchers, recognizer.regex, recognizer);\n    if (isPresent(alias)) {\n      MapWrapper.set(this.names, alias, recognizer);\n    }\n  }\n\n  recognize(url:string):List<StringMap> {\n    var solutions = [];\n    MapWrapper.forEach(this.redirects, (target, path) => {\n      //TODO: \"/\" redirect case\n      if (StringWrapper.startsWith(url, path)) {\n        url = target + StringWrapper.substring(url, path.length);\n      }\n    });\n\n    MapWrapper.forEach(this.matchers, (pathRecognizer, regex) => {\n      var match;\n      if (isPresent(match = RegExpWrapper.firstMatch(regex, url))) {\n        var solution = StringMapWrapper.create();\n        StringMapWrapper.set(solution, 'handler', pathRecognizer.handler);\n        StringMapWrapper.set(solution, 'params', pathRecognizer.parseParams(url));\n\n        //TODO(btford): determine a good generic way to deal with terminal matches\n        if (url == '/') {\n          StringMapWrapper.set(solution, 'matchedUrl', '/');\n          StringMapWrapper.set(solution, 'unmatchedUrl', '');\n        } else {\n          StringMapWrapper.set(solution, 'matchedUrl', match[0]);\n          var unmatchedUrl = StringWrapper.substring(url, match[0].length);\n          StringMapWrapper.set(solution, 'unmatchedUrl', unmatchedUrl);\n        }\n        ListWrapper.push(solutions, solution);\n      }\n    });\n\n    return solutions;\n  }\n\n  hasRoute(name:string) {\n    return MapWrapper.contains(this.names, name);\n  }\n\n  generate(name:string, params:any) {\n    var pathRecognizer = MapWrapper.get(this.names, name);\n    return pathRecognizer.generate(params);\n  }\n}\n"]}