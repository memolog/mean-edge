{"version":3,"sources":["test_bed.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,QAAO;AAAG,KAAG,CAAC,KAAO,cAAY,CAAC;AAE1C,KAAO,EAAC,IAAG;AAAG,UAAQ;AAAG,cAAY,CAAC,KAAO,2BAAyB,CAAC;AACvE,KAAO,EAAC,OAAM,CAAC,KAAO,4BAA0B,CAAC;AACjD,KAAO,EAAC,OAAM,CAAC,KAAO,2BAAyB,CAAC;AAChD,KAAO,EAAC,IAAG,CAAC,KAAO,iCAA+B,CAAC;AAEnD,KAAO,EAAC,IAAG,CAAC,KAAO,0CAAwC,CAAC;AAE5D,KAAO,EAAC,gBAAe,CAAC,KAAO,+CAA6C,CAAC;AAC7E,KAAO,EAAC,OAAM,CAAC,KAAO,kCAAgC,CAAC;AACvD,KAAO,EAAC,YAAW,CAAC,KAAO,sCAAoC,CAAC;AAChE,KAAO,EAAC,sBAAqB;AAAG,aAAW,CAAC,KAAO,sDAAoD,CAAC;AAExG,KAAO,EAAC,SAAQ;AAAG,cAAY;AAAG,GAAC,CAAC,KAAO,UAAQ,CAAC;AACpD,KAAO,EAAC,eAAc;AAAG,UAAQ,CAAC,KAAO,eAAa,CAAC;AAEvD,KAAO,EAAC,cAAa,CAAC,KAAO,uCAAqC,CAAC;AACnE,KAAO,EAAC,GAAE,CAAC,KAAO,+BAA6B,CAAC;AAKhD,KAAO,MAAM,QAAM;AAGjB,YAAU,CAAE,QAAO,AAAU,CAAG;AAC9B,OAAG,UAAU,EAAI,SAAO,CAAC;EAC3B;AAAA,AAUA,aAAW,CAAE,SAAQ,AAAM,CAAG,CAAA,QAAO,AAAM,CAAS;AAClD,OAAG,UAAU,IAAI,AAAC,CAAC,gBAAe,CAAC,QAAQ,AAAC,CAAC,SAAQ,CAAG,SAAO,CAAC,CAAC;EACnE;AAAA,AASA,kBAAgB,CAAE,SAAQ,AAAM,CAAG,CAAA,IAAG,AAAQ,CAAS;AACrD,OAAG,UAAU,IAAI,AAAC,CAAC,gBAAe,CAAC,kBAAkB,AAAC,CAAC,SAAQ,CAAG,KAAG,CAAC,CAAC;EACzE;AAAA,AASA,kBAAgB,CAAE,SAAQ,AAAM,CAAG,CAAA,IAAG,AAAM,CAAG,CAAA,EAAC,AAAM,CAAS;AAC7D,OAAG,UAAU,IAAI,AAAC,CAAC,gBAAe,CAAC,0BAA0B,AAAC,CAAC,SAAQ,CAAG,KAAG,CAAG,GAAC,CAAC,CAAC;EACrF;AAAA,AAaA,WAAS,CAAE,SAAQ,AAAM,CACd,CAAA,CAAC,OAAM,EAAI,KAAG;AAAG,OAAG,EAAI,KAAG,CAAC,EAAiC,GAAC,CAAuB;AAC9F,OAAI,OAAM,AAAC,CAAC,SAAQ,CAAC,CAAA,EAAK,CAAA,OAAM,AAAC,CAAC,OAAM,CAAC,CAAG;AAC1C,UAAM,IAAI,cAAY,AAAC,CAAC,sDAAqD,CAAC,CAAC;IACjF;AAAA,AAEA,OAAI,OAAM,AAAC,CAAC,SAAQ,CAAC,CAAG;AACtB,cAAQ,EAAI,CAAA,SAAQ,AAAC,CAAC,OAAM,CAAC,CAAC;IAChC,KAAO,KAAI,OAAM,AAAC,CAAC,OAAM,CAAC,CAAG;AAC3B,YAAM,EAAI,CAAA,eAAc,AAAC,CAAC,SAAQ,CAAC,CAAC;IACtC;AAAA,AAEA,OAAI,SAAQ,AAAC,CAAC,IAAG,CAAC,CAAG;AACnB,SAAG,kBAAkB,AAAC,CAAC,SAAQ,CAAG,KAAG,CAAC,CAAC;IACzC;AAAA,AAEI,MAAA,CAAA,GAAE,EAAI,CAAA,IAAG,UAAU,IAAI,AAAC,CAAC,cAAa,CAAC,CAAC;AAC5C,AAAI,MAAA,CAAA,MAAK,EAAI,CAAA,EAAC,AAAC,CAAC,uBAAsB,CAAC,CAAC;AACxC,MAAE,YAAY,AAAC,CAAC,GAAE,KAAK,CAAG,OAAK,CAAC,CAAC;AAEjC,AAAI,MAAA,CAAA,gBAAe,EAAI,CAAA,IAAG,AAAC,CAAC,SAAQ,CAAC,QAAQ,AAAC,CAAC,OAAM,CAAC,CAAC;AACvD,SAAO,CAAA,IAAG,UAAU,IAAI,AAAC,CAAC,sBAAqB,CAAC,oBAAoB,AAAC,CAAC,gBAAe,CAAG,KAAG,CAAG,QAAM,CAAG,CAAA,IAAG,UAAU,CAAC,KAAK,AAAC,CAAC,CAAC,gBAAe,IAAM;AAChJ,WAAO,IAAI,UAAQ,AAAC,CAAC,gBAAe,CAAC,CAAC;IACxC,CAAC,CAAC;EACJ;AAAA,AACF;AAAA,AApGA,KAAK,eAAe,AAAC,uBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAyBF,QAAO,GAzBkB;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,8CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAqCA,IAAG,IAAa,IAAG,GArCI;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,mDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAgDK,IAAG,IAjDlC,MAAK,KAAgB,UAC4B;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,mDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YA2DK,IAAG,IAAS,IAAG,IAAO,IAAG,GA3DP;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,4CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YA0EF,IAAG,OA1EsB;EAAC,CAAC,CAAC,CAAC;AAwGrD,KAAO,MAAM,UAAQ;AAInB,YAAU,CAAE,YAAW,AAAc,CAAG;AACtC,OAAG,cAAc,EAAI,aAAW,CAAC;AACjC,OAAG,MAAM,EAAI,CAAA,YAAW,AAAC,CAAC,YAAW,SAAS,CAAC,oBAAoB,CAAE,CAAA,CAAC,CAAC;EACzE;AAAA,AAEA,IAAI,QAAM,EAAS;AACjB,SAAO,CAAA,IAAG,MAAM,QAAQ,CAAC;EAC3B;AAAA,AAEA,IAAI,UAAQ,EAAU;AACpB,SAAO,CAAA,aAAY,AAAC,CAAC,IAAG,MAAM,CAAC,CAAC;EAClC;AAAA,AAEA,cAAY,CAAE,AAAD,CAAS;AACpB,OAAG,MAAM,eAAe,cAAc,AAAC,EAAC,CAAC;AACzC,OAAG,MAAM,eAAe,eAAe,AAAC,EAAC,CAAC;EAC5C;AAAA,AAEA,cAAY,CAAE,QAAO,CAAG;AACtB,SAAO,CAAA,SAAQ,AAAC,CAAC,IAAG,MAAM,CAAG,SAAO,CAAC,CAAC;EACxC;AAAA,AAEA,QAAM,CAAE,AAAD,CAAG;AACR,OAAG,cAAc,QAAQ,AAAC,EAAC,CAAC;EAC9B;AAAA,AAOA,IAAI,QAAM,EAAa;AACrB,SAAO,CAAA,IAAG,MAAM,CAAC;EACnB;AAAA,AACF;AAAA,AA/IA,KAAK,eAAe,AAAC,yBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YA4GE,YAAW,GA5GU;EAAC,CAAC,CAAC,CAAC;AA+IrD","file":"angular2/src/test_lib/test_bed.es6","sourcesContent":["import {Injector, bind} from 'angular2/di';\n\nimport {Type, isPresent, BaseException} from 'angular2/src/facade/lang';\nimport {Promise} from 'angular2/src/facade/async';\nimport {isBlank} from 'angular2/src/facade/lang';\nimport {List} from 'angular2/src/facade/collection';\n\nimport {View} from 'angular2/src/core/annotations_impl/view';\n\nimport {TemplateResolver} from 'angular2/src/core/compiler/template_resolver';\nimport {AppView} from 'angular2/src/core/compiler/view';\nimport {internalView} from 'angular2/src/core/compiler/view_ref';\nimport {DynamicComponentLoader, ComponentRef} from 'angular2/src/core/compiler/dynamic_component_loader';\n\nimport {queryView, viewRootNodes, el} from './utils';\nimport {instantiateType, getTypeOf} from './lang_utils';\n\nimport {DOCUMENT_TOKEN} from 'angular2/src/render/dom/dom_renderer';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\n\n/**\n * @exportedAs angular2/test\n */\nexport class TestBed {\n  _injector: Injector;\n\n  constructor(injector: Injector) {\n    this._injector = injector;\n  }\n\n  /**\n   * Overrides the {@link View} of a {@link Component}.\n   *\n   * @see setInlineTemplate() to only override the html\n   *\n   * @param {Type} component\n   * @param {ViewDefinition} template\n   */\n  overrideView(component: Type, template: View): void {\n    this._injector.get(TemplateResolver).setView(component, template);\n  }\n\n  /**\n   * Overrides only the html of a {@link Component}.\n   * All the other propoerties of the component's {@link View} are preserved.\n   *\n   * @param {Type} component\n   * @param {string} html\n   */\n  setInlineTemplate(component: Type, html: string): void {\n    this._injector.get(TemplateResolver).setInlineTemplate(component, html);\n  }\n\n  /**\n   * Overrides the directives from the component {@link View}.\n   *\n   * @param {Type} component\n   * @param {Type} from\n   * @param {Type} to\n   */\n  overrideDirective(component: Type, from: Type, to: Type): void {\n    this._injector.get(TemplateResolver).overrideTemplateDirective(component, from, to);\n  }\n\n  /**\n   * Creates an `AppView` for the given component.\n   *\n   * Only either a component or a context needs to be specified but both can be provided for\n   * advanced use cases (ie subclassing the context).\n   *\n   * @param {Type} component\n   * @param {*} context\n   * @param {string} html Use as the component template when specified (shortcut for setInlineTemplate)\n   * @return {Promise<ViewProxy>}\n   */\n  createView(component: Type,\n             {context = null, html = null}: {context:any, html: string} = {}): Promise<ViewProxy> {\n    if (isBlank(component) && isBlank(context)) {\n      throw new BaseException('You must specified at least a component or a context');\n    }\n\n    if (isBlank(component)) {\n      component = getTypeOf(context);\n    } else if (isBlank(context)) {\n      context = instantiateType(component);\n    }\n\n    if (isPresent(html)) {\n      this.setInlineTemplate(component, html);\n    }\n\n    var doc = this._injector.get(DOCUMENT_TOKEN);\n    var rootEl = el('<div id=\"root\"></div>');\n    DOM.appendChild(doc.body, rootEl);\n\n    var componentBinding = bind(component).toValue(context);\n    return this._injector.get(DynamicComponentLoader).loadIntoNewLocation(componentBinding, null, '#root', this._injector).then((hostComponentRef) => {\n      return new ViewProxy(hostComponentRef);\n    });\n  }\n}\n\n/**\n * Proxy to `AppView` return by `createView` in {@link TestBed} which offers a high level API for tests.\n */\nexport class ViewProxy {\n  _componentRef: ComponentRef;\n  _view: AppView;\n\n  constructor(componentRef: ComponentRef) {\n    this._componentRef = componentRef;\n    this._view = internalView(componentRef.hostView).componentChildViews[0];\n  }\n\n  get context(): any {\n    return this._view.context;\n  }\n\n  get rootNodes(): List {\n    return viewRootNodes(this._view);\n  }\n\n  detectChanges(): void {\n    this._view.changeDetector.detectChanges();\n    this._view.changeDetector.checkNoChanges();\n  }\n\n  querySelector(selector) {\n    return queryView(this._view, selector);\n  }\n\n  destroy() {\n    this._componentRef.dispose();\n  }\n\n  /**\n   * @returns `AppView` returns the underlying `AppView`.\n   *\n   * Prefer using the other methods which hide implementation details.\n   */\n  get rawView(): AppView {\n    return this._view;\n  }\n}\n"]}