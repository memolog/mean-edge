{"version":3,"sources":["api.js"],"names":[],"mappings":"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","file":"angular2/src/render/api.es6","sourcesContent":["import {isPresent} from 'angular2/src/facade/lang';\nimport {Promise} from 'angular2/src/facade/async';\nimport {List, Map} from 'angular2/src/facade/collection';\nimport {ASTWithSource} from 'angular2/change_detection';\n\n/**\n * General notes:\n *\n * The methods for creating / destroying views in this API are used in the AppViewHydrator\n * and RenderViewHydrator as well.\n *\n * We are already parsing expressions on the render side:\n * - this makes the ElementBinders more compact\n *   (e.g. no need to distinguish interpolations from regular expressions from literals)\n * - allows to retrieve which properties should be accessed from the event\n *   by looking at the expression\n * - we need the parse at least for the `template` attribute to match\n *   directives in it\n * - render compiler is not on the critical path as\n *   its output will be stored in precompiled templates.\n */\nexport class EventBinding {\n  fullName: string; // name/target:name, e.g \"click\", \"window:resize\"\n  source: ASTWithSource;\n\n  constructor(fullName :string, source: ASTWithSource) {\n    this.fullName = fullName;\n    this.source = source;\n  }\n}\n\nexport class ElementBinder {\n  index:number;\n  parentIndex:number;\n  distanceToParent:number;\n  directives:List<DirectiveBinder>;\n  nestedProtoView:ProtoViewDto;\n  propertyBindings: Map<string, ASTWithSource>;\n  variableBindings: Map<string, ASTWithSource>;\n  // Note: this contains a preprocessed AST\n  // that replaced the values that should be extracted from the element\n  // with a local name\n  eventBindings: List<EventBinding>;\n  textBindings: List<ASTWithSource>;\n  readAttributes: Map<string, string>;\n\n  constructor({\n    index, parentIndex, distanceToParent,\n    directives, nestedProtoView,\n    propertyBindings, variableBindings,\n    eventBindings, textBindings,\n    readAttributes\n  }) {\n    this.index = index;\n    this.parentIndex = parentIndex;\n    this.distanceToParent = distanceToParent;\n    this.directives = directives;\n    this.nestedProtoView = nestedProtoView;\n    this.propertyBindings = propertyBindings;\n    this.variableBindings = variableBindings;\n    this.eventBindings = eventBindings;\n    this.textBindings = textBindings;\n    this.readAttributes = readAttributes;\n  }\n}\n\nexport class DirectiveBinder {\n  // Index into the array of directives in the View instance\n  directiveIndex:any;\n  propertyBindings: Map<string, ASTWithSource>;\n  // Note: this contains a preprocessed AST\n  // that replaced the values that should be extracted from the element\n  // with a local name\n  eventBindings: List<EventBinding>;\n  hostPropertyBindings: Map<string, ASTWithSource>;\n  constructor({\n    directiveIndex, propertyBindings, eventBindings, hostPropertyBindings\n  }) {\n    this.directiveIndex = directiveIndex;\n    this.propertyBindings = propertyBindings;\n    this.eventBindings = eventBindings;\n    this.hostPropertyBindings = hostPropertyBindings;\n  }\n}\n\nexport class ProtoViewDto {\n  // A view that contains the host element with bound\n  // component directive.\n  // Contains a view of type #COMPONENT_VIEW_TYPE.\n  static get HOST_VIEW_TYPE() { return 0; }\n  // The view of the component\n  // Can contain 0 to n views of type #EMBEDDED_VIEW_TYPE\n  static get COMPONENT_VIEW_TYPE() { return 1; }\n  // A view that is embedded into another View via a <template> element\n  // inside of a component view\n  static get EMBEDDED_VIEW_TYPE() { return 1; }\n\n  render: RenderProtoViewRef;\n  elementBinders:List<ElementBinder>;\n  variableBindings: Map<string, string>;\n  type: number;\n\n  constructor({render, elementBinders, variableBindings, type}={}) {\n    this.render = render;\n    this.elementBinders = elementBinders;\n    this.variableBindings = variableBindings;\n    this.type = type;\n  }\n}\n\nexport class DirectiveMetadata {\n  static get DIRECTIVE_TYPE() { return 0; }\n  static get COMPONENT_TYPE() { return 1; }\n  id:any;\n  selector:string;\n  compileChildren:boolean;\n  hostListeners:Map<string, string>;\n  hostProperties:Map<string, string>;\n  hostAttributes:Map<string, string>;\n  hostActions:Map<string, string>;\n  properties:Map<string, string>;\n  readAttributes:List<string>;\n  type:number;\n  constructor({id, selector, compileChildren, hostListeners, hostProperties, hostAttributes, hostActions, properties, readAttributes, type}) {\n    this.id = id;\n    this.selector = selector;\n    this.compileChildren = isPresent(compileChildren) ? compileChildren : true;\n    this.hostListeners = hostListeners;\n    this.hostProperties = hostProperties;\n    this.hostAttributes = hostAttributes;\n    this.hostActions = hostActions;\n    this.properties = properties;\n    this.readAttributes = readAttributes;\n    this.type = type;\n  }\n}\n\n// An opaque reference to a DomProtoView\nexport class RenderProtoViewRef {\n}\n\n// An opaque reference to a DomView\nexport class RenderViewRef {\n}\n\nexport class ViewDefinition {\n  componentId: string;\n  absUrl: string;\n  template: string;\n  directives: List<DirectiveMetadata>;\n\n  constructor({componentId, absUrl, template, directives}) {\n    this.componentId = componentId;\n    this.absUrl = absUrl;\n    this.template = template;\n    this.directives = directives;\n  }\n}\n\nexport class RenderCompiler {\n  /**\n   * Creats a ProtoViewDto that contains a single nested component with the given componentId.\n   */\n  compileHost(componentId):Promise<ProtoViewDto> { return null; }\n\n  /**\n   * Compiles a single DomProtoView. Non recursive so that\n   * we don't need to serialize all possible components over the wire,\n   * but only the needed ones based on previous calls.\n   */\n  compile(template:ViewDefinition):Promise<ProtoViewDto> { return null; }\n}\n\nexport class Renderer {\n  /**\n   * Creates a host view that includes the given element.\n   * @param {RenderViewRef} parentHostViewRef (might be null)\n   * @param {any} hostElementSelector css selector for the host element\n   * @param {RenderProtoViewRef} hostProtoViewRef a RenderProtoViewRef of type ProtoViewDto.HOST_VIEW_TYPE\n   * @return {RenderViewRef} the created view\n   */\n  createInPlaceHostView(parentHostViewRef:RenderViewRef, hostElementSelector:string, hostProtoViewRef:RenderProtoViewRef):RenderViewRef {\n    return null;\n  }\n\n  /**\n   * Destroys the given host view in the given parent view.\n   */\n  destroyInPlaceHostView(parentHostViewRef:RenderViewRef, hostViewRef:RenderViewRef) {\n  }\n\n  /**\n   * Creates a regular view out of the given ProtoView\n   */\n  createView(protoViewRef:RenderProtoViewRef):RenderViewRef {\n    return null;\n  }\n\n  /**\n   * Destroys the given view after it has been dehydrated and detached\n   */\n  destroyView(viewRef:RenderViewRef) {\n  }\n\n  /**\n   * Attaches a componentView into the given hostView at the given element\n   */\n  attachComponentView(hostViewRef:RenderViewRef, elementIndex:number, componentViewRef:RenderViewRef) {\n  }\n\n  /**\n   * Detaches a componentView into the given hostView at the given element\n   */\n  detachComponentView(hostViewRef:RenderViewRef, boundElementIndex:number, componentViewRef:RenderViewRef) {\n  }\n\n  /**\n   * Attaches a view into a ViewContainer (in the given parentView at the given element) at the given index.\n   */\n  attachViewInContainer(parentViewRef:RenderViewRef, boundElementIndex:number, atIndex:number, viewRef:RenderViewRef) {\n  }\n\n  /**\n   * Detaches a view into a ViewContainer (in the given parentView at the given element) at the given index.\n   */\n  // TODO(tbosch): this should return a promise as it can be animated!\n  detachViewInContainer(parentViewRef:RenderViewRef, boundElementIndex:number, atIndex:number, viewRef:RenderViewRef) {\n  }\n\n  /**\n   * Hydrates a view after it has been attached. Hydration/dehydration is used for reusing views inside of the view pool.\n   */\n  hydrateView(viewRef:RenderViewRef) {\n  }\n\n  /**\n   * Dehydrates a view after it has been attached. Hydration/dehydration is used for reusing views inside of the view pool.\n   */\n  dehydrateView(viewRef:RenderViewRef) {\n  }\n\n  /**\n   * Sets a property on an element.\n   * Note: This will fail if the property was not mentioned previously as a host property\n   * in the ProtoView\n   */\n  setElementProperty(viewRef:RenderViewRef, elementIndex:number, propertyName:string, propertyValue:any):void {\n  }\n\n  /**\n   * Calls an action.\n   * Note: This will fail if the action was not mentioned previously as a host action\n   * in the ProtoView\n   */\n  callAction(viewRef:RenderViewRef, elementIndex:number, actionExpression:string, actionArgs:any):void {\n  }\n\n  /**\n   * Sets the value of a text node.\n   */\n  setText(viewRef:RenderViewRef, textNodeIndex:number, text:string):void {\n  }\n\n  /**\n   * Sets the dispatcher for all events of the given view\n   */\n  setEventDispatcher(viewRef:RenderViewRef, dispatcher:any/*api.EventDispatcher*/):void {\n  }\n}\n\n\n/**\n * A dispatcher for all events happening in a view.\n */\nexport class EventDispatcher {\n  /**\n   * Called when an event was triggered for a on-* attribute on an element.\n   * @param {Map<string, any>} locals Locals to be used to evaluate the\n   *   event expressions\n   */\n  dispatchEvent(\n    elementIndex:number, eventName:string, locals:Map<string, any>\n  ):void {}\n}\n"]}