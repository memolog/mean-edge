{"version":3,"sources":["element_ref.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,GAAE,CAAC,KAAO,+BAA6B,CAAC;AAChD,KAAO,EAAC,cAAa,CAAC,KAAO,2BAAyB,CAAC;AACvD,KAAO,EAAC,OAAM,CAAC,KAAO,aAAW,CAAC;AAClC,KAAO,EAAC,sBAAqB,CAAC,KAAO,oCAAkC,CAAC;AAKxE,KAAO,MAAM,WAAS;AAIpB,YAAU,CAAE,UAAS,AAAQ,CAAG,CAAA,iBAAgB,AAAO,CAAG;AACxD,OAAG,WAAW,EAAI,WAAS,CAAC;AAC5B,OAAG,kBAAkB,EAAI,kBAAgB,CAAC;EAC5C;AAAA,AASA,IAAI,WAAS,EAAI;AACf,SAAO,CAAA,sBAAqB,AAAC,CAAC,IAAG,WAAW,OAAO,CAAC,cAAc,CAAE,IAAG,kBAAkB,CAAC,CAAC;EAC7F;AAAA,AASA,aAAW,CAAE,IAAG,AAAO,CAAU;AAC/B,SAAO,CAAA,cAAa,AAAC,CAAC,GAAE,aAAa,AAAC,CAAC,IAAG,WAAW,CAAG,KAAG,CAAC,CAAC,CAAC;EAChE;AAAA,AACF;AAAA,AAtCA,KAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAWD,OAAM,IAZ/B,MAAK,KAAgB,UAC4B;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,iDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,MAAK,KAAgB,UAC4B;EAAC,CAAC,CAAC,CAAC;AAsCrD","file":"angular2/src/core/compiler/element_ref.es6","sourcesContent":["import {DOM} from 'angular2/src/dom/dom_adapter';\nimport {normalizeBlank} from 'angular2/src/facade/lang';\nimport {ViewRef} from './view_ref';\nimport {resolveInternalDomView} from 'angular2/src/render/dom/view/view';\n\n/**\n * @exportedAs angular2/view\n */\nexport class ElementRef {\n  parentView:ViewRef;\n  boundElementIndex:number;\n\n  constructor(parentView:ViewRef, boundElementIndex:number) {\n    this.parentView = parentView;\n    this.boundElementIndex = boundElementIndex;\n  }\n\n  /**\n   * Exposes the underlying DOM element.\n   * (DEPRECATED way of accessing the DOM, replacement coming)\n   */\n  // TODO(tbosch): Here we expose the real DOM element.\n  // We need a more general way to read/write to the DOM element\n  // via a proper abstraction in the render layer\n  get domElement() {\n    return resolveInternalDomView(this.parentView.render).boundElements[this.boundElementIndex];\n  }\n\n  /**\n   * Gets an attribute from the underlying DOM element.\n   * (DEPRECATED way of accessing the DOM, replacement coming)\n   */\n  // TODO(tbosch): Here we expose the real DOM element.\n  // We need a more general way to read/write to the DOM element\n  // via a proper abstraction in the render layer\n  getAttribute(name:string):string {\n    return normalizeBlank(DOM.getAttribute(this.domElement, name));\n  }\n}\n"]}