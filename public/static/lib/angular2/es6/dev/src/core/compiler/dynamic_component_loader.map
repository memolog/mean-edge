{"version":3,"sources":["dynamic_component_loader.js"],"names":[],"mappings":"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","file":"angular2/src/core/compiler/dynamic_component_loader.es6","sourcesContent":["import {Key, Injector, ResolvedBinding, Binding, bind} from 'angular2/di'\nimport {Injectable} from 'angular2/src/di/annotations_impl';\nimport {Compiler} from './compiler';\nimport {Type, BaseException, stringify, isPresent} from 'angular2/src/facade/lang';\nimport {Promise} from 'angular2/src/facade/async';\nimport {AppViewManager, ComponentCreateResult} from 'angular2/src/core/compiler/view_manager';\nimport {ElementRef} from './element_ref';\n\n/**\n * @exportedAs angular2/view\n */\nexport class ComponentRef {\n  location:ElementRef;\n  instance:any;\n  _dispose:Function;\n\n  constructor(location:ElementRef, instance:any, dispose:Function) {\n    this.location = location;\n    this.instance = instance;\n    this._dispose = dispose;\n  }\n\n  get hostView() {\n    return this.location.parentView;\n  }\n\n  dispose() {\n    this._dispose();\n  }\n}\n\n/**\n * Service for dynamically loading a Component into an arbitrary position in the internal Angular\n * application tree.\n *\n * @exportedAs angular2/view\n */\n@Injectable()\nexport class DynamicComponentLoader {\n  _compiler:Compiler;\n  _viewManager:AppViewManager;\n\n  constructor(compiler:Compiler,\n              viewManager: AppViewManager) {\n    this._compiler = compiler;\n    this._viewManager = viewManager;\n  }\n\n  /**\n   * Loads a component into the location given by the provided ElementRef. The loaded component\n   * receives injection as if it in the place of the provided ElementRef.\n   */\n  loadIntoExistingLocation(typeOrBinding, location:ElementRef, injector:Injector = null):Promise<ComponentRef> {\n    var binding = this._getBinding(typeOrBinding);\n    return this._compiler.compile(binding.token).then(componentProtoViewRef => {\n      this._viewManager.createDynamicComponentView(\n        location, componentProtoViewRef, binding, injector);\n      var component = this._viewManager.getComponent(location);\n      var dispose = () => {throw new BaseException(\"Not implemented\");};\n      return new ComponentRef(location, component, dispose);\n    });\n  }\n\n  /**\n   * Loads a component in the element specified by elementSelector. The loaded component receives\n   * injection normally as a hosted view.\n   */\n  loadIntoNewLocation(typeOrBinding, parentComponentLocation:ElementRef, elementSelector:string,\n                      injector:Injector = null):Promise<ComponentRef> {\n    return  this._compiler.compileInHost(this._getBinding(typeOrBinding)).then(hostProtoViewRef => {\n      var hostViewRef = this._viewManager.createInPlaceHostView(\n        parentComponentLocation, elementSelector, hostProtoViewRef, injector);\n      var newLocation = new ElementRef(hostViewRef, 0);\n      var component = this._viewManager.getComponent(newLocation);\n\n      var dispose = () => {\n        this._viewManager.destroyInPlaceHostView(parentComponentLocation, hostViewRef);\n      };\n      return new ComponentRef(newLocation, component, dispose);\n    });\n  }\n\n  /**\n   * Loads a component next to the provided ElementRef. The loaded component receives\n   * injection normally as a hosted view.\n   */\n  loadNextToExistingLocation(typeOrBinding, location:ElementRef, injector:Injector = null):Promise<ComponentRef> {\n    var binding = this._getBinding(typeOrBinding);\n    return this._compiler.compileInHost(binding).then(hostProtoViewRef => {\n      var viewContainer = this._viewManager.getViewContainer(location);\n      var hostViewRef = viewContainer.create(hostProtoViewRef, viewContainer.length, null, injector);\n      var newLocation = new ElementRef(hostViewRef, 0);\n      var component = this._viewManager.getComponent(newLocation);\n\n      var dispose = () => {\n        var index = viewContainer.indexOf(hostViewRef);\n        viewContainer.remove(index);\n      };\n      return new ComponentRef(newLocation, component, dispose);\n    });\n  }\n\n  _getBinding(typeOrBinding) {\n    var binding;\n    if (typeOrBinding instanceof Binding) {\n      binding = typeOrBinding;\n    } else {\n      binding = bind(typeOrBinding).toClass(typeOrBinding);\n    }\n    return binding;\n  }\n\n}\n"]}