{"version":3,"sources":["directive_parser.js"],"names":[],"mappings":"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","file":"angular2/src/render/dom/compiler/directive_parser.es6","sourcesContent":["import {isPresent, isBlank, BaseException, assertionsEnabled, RegExpWrapper, StringWrapper} from 'angular2/src/facade/lang';\nimport {List, MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\nimport {Parser} from 'angular2/change_detection';\n\nimport {SelectorMatcher, CssSelector} from 'angular2/src/render/dom/compiler/selector';\n\nimport {CompileStep} from './compile_step';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\n\nimport {DirectiveMetadata} from '../../api';\nimport {dashCaseToCamelCase, camelCaseToDashCase, EVENT_TARGET_SEPARATOR} from '../util';\n\n/**\n * Parses the directives on a single element. Assumes ViewSplitter has already created\n * <template> elements for template directives.\n */\nexport class DirectiveParser extends CompileStep {\n  _selectorMatcher:SelectorMatcher;\n  _directives:List<DirectiveMetadata>;\n  _parser:Parser;\n\n  constructor(parser: Parser, directives:List<DirectiveMetadata>) {\n    super();\n    this._parser = parser;\n    this._selectorMatcher = new SelectorMatcher();\n    this._directives = directives;\n    for (var i=0; i<directives.length; i++) {\n      var directive = directives[i];\n      var selector = CssSelector.parse(directive.selector);\n      this._ensureComponentOnlyHasElementSelector(selector, directive);\n      this._selectorMatcher.addSelectables(selector, i);\n    }\n  }\n\n  _ensureComponentOnlyHasElementSelector(selector, directive) {\n    var isElementSelector = selector.length === 1 && selector[0].isElementSelector();\n    if (! isElementSelector &&  directive.type === DirectiveMetadata.COMPONENT_TYPE) {\n      throw new BaseException(`Component '${directive.id}' can only have an element selector, but had '${directive.selector}'`);\n    }\n  }\n\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    var attrs = current.attrs();\n    var classList = current.classList();\n\n    var cssSelector = new CssSelector();\n    var nodeName = DOM.nodeName(current.element);\n    cssSelector.setElement(nodeName);\n    for (var i=0; i < classList.length; i++) {\n      cssSelector.addClassName(classList[i]);\n    }\n\n    MapWrapper.forEach(attrs, (attrValue, attrName) => {\n      cssSelector.addAttribute(attrName, attrValue);\n    });\n\n    var componentDirective;\n\n    this._selectorMatcher.match(cssSelector, (selector, directiveIndex) => {\n      var elementBinder = current.bindElement();\n      var directive = this._directives[directiveIndex];\n      var directiveBinderBuilder = elementBinder.bindDirective(directiveIndex);\n      current.compileChildren = current.compileChildren && directive.compileChildren;\n      if (isPresent(directive.properties)) {\n        MapWrapper.forEach(directive.properties, (bindConfig, dirProperty) => {\n          this._bindDirectiveProperty(dirProperty, bindConfig, current, directiveBinderBuilder);\n        });\n      }\n      if (isPresent(directive.hostListeners)) {\n        MapWrapper.forEach(directive.hostListeners, (action, eventName) => {\n          this._bindDirectiveEvent(eventName, action, current, directiveBinderBuilder);\n        });\n      }\n      if (isPresent(directive.hostActions)) {\n        MapWrapper.forEach(directive.hostActions, (action, actionName) => {\n          this._bindHostAction(actionName, action, current, directiveBinderBuilder);\n        });\n      }\n      if (isPresent(directive.hostProperties)) {\n        MapWrapper.forEach(directive.hostProperties, (hostPropertyName, directivePropertyName) => {\n          this._bindHostProperty(hostPropertyName, directivePropertyName, current, directiveBinderBuilder);\n        });\n      }\n      if (isPresent(directive.hostAttributes)) {\n        MapWrapper.forEach(directive.hostAttributes, (hostAttrValue, hostAttrName) => {\n          if (!DOM.hasAttribute(current.element, hostAttrName)) {\n            DOM.setAttribute(current.element, hostAttrName, hostAttrValue);\n          }\n        });\n      }\n      if (isPresent(directive.readAttributes)) {\n        ListWrapper.forEach(directive.readAttributes, (attrName) => {\n          elementBinder.readAttribute(attrName);\n        });\n      }\n      if (directive.type === DirectiveMetadata.COMPONENT_TYPE) {\n        if (isPresent(componentDirective)) {\n          throw new BaseException(`Only one component directive is allowed per element - check ${current.elementDescription}`);\n        }\n        componentDirective = directive;\n        elementBinder.setComponentId(directive.id);\n      }\n    });\n  }\n\n  _bindDirectiveProperty(dirProperty, bindConfig, compileElement, directiveBinderBuilder) {\n    var pipes = this._splitBindConfig(bindConfig);\n    var elProp = ListWrapper.removeAt(pipes, 0);\n\n    var bindingAst = MapWrapper.get(\n      compileElement.bindElement().propertyBindings,\n      dashCaseToCamelCase(elProp)\n    );\n\n    if (isBlank(bindingAst)) {\n      var attributeValue = MapWrapper.get(compileElement.attrs(), camelCaseToDashCase(elProp));\n      if (isPresent(attributeValue)) {\n        bindingAst = this._parser.wrapLiteralPrimitive(\n          attributeValue,\n          compileElement.elementDescription\n        );\n      }\n    }\n\n    // Bindings are optional, so this binding only needs to be set up if an expression is given.\n    if (isPresent(bindingAst)) {\n      var fullExpAstWithBindPipes = this._parser.addPipes(bindingAst, pipes);\n      directiveBinderBuilder.bindProperty(\n        dirProperty, fullExpAstWithBindPipes\n      );\n    }\n  }\n\n  _bindDirectiveEvent(eventName, action, compileElement, directiveBinderBuilder) {\n    var ast = this._parser.parseAction(action, compileElement.elementDescription);\n    if (StringWrapper.contains(eventName, EVENT_TARGET_SEPARATOR)) {\n      var parts = eventName.split(EVENT_TARGET_SEPARATOR);\n      directiveBinderBuilder.bindEvent(parts[1], ast, parts[0]);\n    } else {\n      directiveBinderBuilder.bindEvent(eventName, ast);\n    }\n  }\n\n  _bindHostAction(actionName, actionExpression, compileElement, directiveBinderBuilder) {\n    var ast = this._parser.parseAction(actionExpression, compileElement.elementDescription);\n    directiveBinderBuilder.bindHostAction(actionName, actionExpression, ast);\n  }\n\n  _bindHostProperty(hostPropertyName, directivePropertyName, compileElement, directiveBinderBuilder) {\n    var ast = this._parser.parseBinding(directivePropertyName,\n      `hostProperties of ${compileElement.elementDescription}`);\n    directiveBinderBuilder.bindHostProperty(hostPropertyName, ast);\n  }\n\n  _splitBindConfig(bindConfig:string) {\n    return ListWrapper.map(bindConfig.split('|'), (s) => s.trim());\n  }\n}\n\n"]}