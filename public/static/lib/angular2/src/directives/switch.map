{"version":3,"sources":["switch.js"],"names":[],"mappings":"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","file":"angular2/src/directives/switch.js","sourcesContent":["import {Directive} from 'angular2/src/core/annotations_impl/annotations';\nimport {ViewContainerRef} from 'angular2/src/core/compiler/view_container_ref';\nimport {ProtoViewRef} from 'angular2/src/core/compiler/view_ref';\nimport {isPresent, isBlank, normalizeBlank} from 'angular2/src/facade/lang';\nimport {ListWrapper, List, MapWrapper, Map} from 'angular2/src/facade/collection';\nimport {Parent} from 'angular2/src/core/annotations_impl/visibility';\n\nclass SwitchView {\n  _viewContainerRef: ViewContainerRef;\n  _protoViewRef: ProtoViewRef;\n\n  constructor(viewContainerRef: ViewContainerRef, protoViewRef: ProtoViewRef) {\n    this._protoViewRef = protoViewRef;\n    this._viewContainerRef = viewContainerRef;\n  }\n\n  create() {\n    this._viewContainerRef.create(this._protoViewRef);\n  }\n\n  destroy() {\n    this._viewContainerRef.clear();\n  }\n}\n\n/**\n * The `Switch` directive is used to conditionally swap DOM structure on your template based on a\n * scope expression.\n * Elements within `Switch` but without `SwitchWhen` or `SwitchDefault` directives will be\n * preserved at the location as specified in the template.\n *\n * `Switch` simply chooses nested elements and makes them visible based on which element matches\n * the value obtained from the evaluated expression. In other words, you define a container element\n * (where you place the directive), place an expression on the **`[switch]=\"...\"` attribute**),\n * define any inner elements inside of the directive and place a `[switch-when]` attribute per\n * element.\n * The when attribute is used to inform Switch which element to display when the expression is\n * evaluated. If a matching expression is not found via a when attribute then an element with the\n * default attribute is displayed.\n *\n * # Example:\n *\n * ```\n * <ANY [switch]=\"expression\">\n *   <template [switch-when]=\"whenExpression1\">...</template>\n *   <template [switch-when]=\"whenExpression1\">...</template>\n *   <template [switch-default]>...</template>\n * </ANY>\n * ```\n *\n * @exportedAs angular2/directives\n */\n@Directive({\n  selector: '[switch]',\n  properties: {\n    'value': 'switch'\n  }\n})\nexport class Switch {\n  _switchValue: any;\n  _useDefault: boolean;\n  _valueViews: Map;\n  _activeViews: List<SwitchView>;\n\n  constructor() {\n    this._valueViews = MapWrapper.create();\n    this._activeViews = ListWrapper.create();\n    this._useDefault = false;\n  }\n\n  set value(value) {\n    // Empty the currently active ViewContainers\n    this._emptyAllActiveViews();\n\n    // Add the ViewContainers matching the value (with a fallback to default)\n    this._useDefault = false;\n    var views = MapWrapper.get(this._valueViews, value);\n    if (isBlank(views)) {\n      this._useDefault = true;\n      views = normalizeBlank(MapWrapper.get(this._valueViews, _whenDefault));\n    }\n    this._activateViews(views);\n\n    this._switchValue = value;\n  }\n\n  _onWhenValueChanged(oldWhen, newWhen, view: SwitchView):void {\n    this._deregisterView(oldWhen, view);\n    this._registerView(newWhen, view);\n\n    if (oldWhen === this._switchValue) {\n      view.destroy();\n      ListWrapper.remove(this._activeViews, view);\n    } else if (newWhen === this._switchValue) {\n      if (this._useDefault) {\n        this._useDefault = false;\n        this._emptyAllActiveViews();\n      }\n      view.create();\n      ListWrapper.push(this._activeViews, view);\n    }\n\n    // Switch to default when there is no more active ViewContainers\n    if (this._activeViews.length === 0 && !this._useDefault) {\n      this._useDefault = true;\n      this._activateViews(MapWrapper.get(this._valueViews, _whenDefault));\n    }\n  }\n\n  _emptyAllActiveViews():void {\n    var activeContainers = this._activeViews;\n    for (var i = 0; i < activeContainers.length; i++) {\n      activeContainers[i].destroy();\n    }\n    this._activeViews = ListWrapper.create();\n  }\n\n  _activateViews(views: List<SwitchView>):void {\n    // TODO(vicb): assert(this._activeViews.length === 0);\n    if (isPresent(views)) {\n      for (var i = 0; i < views.length; i++) {\n        views[i].create();\n      }\n      this._activeViews = views;\n    }\n  }\n\n  _registerView(value, view: SwitchView): void {\n    var views = MapWrapper.get(this._valueViews, value);\n    if (isBlank(views)) {\n      views = ListWrapper.create();\n      MapWrapper.set(this._valueViews, value, views);\n    }\n    ListWrapper.push(views, view);\n  }\n\n  _deregisterView(value, view: SwitchView):void {\n    // `_whenDefault` is used a marker for non-registered whens\n    if (value == _whenDefault) return;\n    var views = MapWrapper.get(this._valueViews, value);\n    if (views.length == 1) {\n      MapWrapper.delete(this._valueViews, value);\n    } else {\n      ListWrapper.remove(views, view);\n    }\n  }\n}\n\n\n/**\n * Defines a case statement as an expression.\n *\n * If multiple `SwitchWhen` match the `Switch` value, all of them are displayed.\n *\n * Example:\n *\n * ```\n * // match against a context variable\n * <template [switch-when]=\"contextVariable\">...</template>\n *\n * // match against a constant string\n * <template [switch-when]=\"'stringValue'\">...</template>\n * ```\n *\n * @exportedAs angular2/directives\n */\n@Directive({\n  selector: '[switch-when]',\n  properties: {\n    'when' : 'switch-when'\n  }\n})\nexport class SwitchWhen {\n  _value: any;\n  _switch: Switch;\n  _view: SwitchView;\n\n  constructor(viewContainer: ViewContainerRef, protoViewRef: ProtoViewRef, @Parent() sswitch: Switch) {\n    // `_whenDefault` is used as a marker for a not yet initialized value\n    this._value = _whenDefault;\n    this._switch = sswitch;\n    this._view = new SwitchView(viewContainer, protoViewRef);\n  }\n\n  onDestroy() {\n    this._switch\n  }\n\n  set when(value) {\n    this._switch._onWhenValueChanged(this._value, value, this._view);\n    this._value = value;\n  }\n}\n\n\n/**\n * Defines a default case statement.\n *\n * Default case statements are displayed when no `SwitchWhen` match the `switch` value.\n *\n * Example:\n *\n * ```\n * <template [switch-default]>...</template>\n * ```\n *\n * @exportedAs angular2/directives\n */\n@Directive({\n  selector: '[switch-default]'\n})\nexport class SwitchDefault {\n  constructor(viewContainer: ViewContainerRef, protoViewRef: ProtoViewRef, @Parent() sswitch: Switch) {\n    sswitch._registerView(_whenDefault, new SwitchView(viewContainer, protoViewRef));\n  }\n}\n\nvar _whenDefault = new Object();\n"]}