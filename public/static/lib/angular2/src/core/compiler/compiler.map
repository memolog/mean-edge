{"version":3,"sources":["compiler.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;eAArC,EAAC,GAAE,YAAqB;AAAE,0BAAwB;IAAE,AAA9B,CAAC;UAAvB,EAAC,GAAE,YAAqB;AAAE,qBAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;;;;;;;;;;;;;;;;EAAlD,QAAM,EAAd,EAAC,qBAAoB,CAAA,OAAM,AAAC,eAAkB,CACtC,CAAA,sBAAqB,+BAA2B,CAAA,sBAAqB,GAAK,EAAC,OAAM,qBAAmB,CAAC,AAD/D,CACgE;EAAtG,WAAS,EADjB,EAAC,mDAAoB,CAAA,OAAM,AAAC,oCAAkB,CACtC,CAAA,oDAAqB,6DAA2B,CAAA,oDAAqB,GAAK,EAAC,OAAM,mDAAmB,CAAC,AAD/D,CACgE;SAD9G,EAAC,wCAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,yCAAqB,kDAA2B,CAAA,yCAAqB,GAAK,EAAC,OAAM,wCAAmB,CAAC,AAD/D,CACgE;AACtG,OAAG;AAAG,UAAM;AAAG,YAAQ;AAAG,gBAAY;AAAG,iBAAa;AAAG,YAAQ;SAFzE,EAAC,yCAAoB,CAAA,OAAM,AAAC,6BAAkB,CACtC,CAAA,0CAAqB,mDAA2B,CAAA,0CAAqB,GAAK,EAAC,OAAM,yCAAmB,CAAC,AAD/D,CACgE;AAEtG,UAAM;AAAG,iBAAa;SAH9B,EAAC,8CAAoB,CAAA,OAAM,AAAC,kCAAkB,CACtC,CAAA,+CAAqB,wDAA2B,CAAA,+CAAqB,GAAK,EAAC,OAAM,8CAAmB,CAAC,AAD/D,CACgE;AAGtG,OAAG;AAAG,cAAU;AAAG,MAAE;AAAG,aAAS;EAEjC,wBAAsB,EAN9B,EAAC,sCAAoB,CAAA,OAAM,AAAC,+BAAkB,CACtC,CAAA,uCAAqB,gDAA2B,CAAA,uCAAqB,GAAK,EAAC,OAAM,sCAAmB,CAAC,AAD/D,CACgE;SAD9G,EAAC,qDAAoB,CAAA,OAAM,AAAC,mCAAkB,CACtC,CAAA,sDAAqB,+DAA2B,CAAA,sDAAqB,GAAK,EAAC,OAAM,qDAAmB,CAAC,AAD/D,CACgE;AAMtG,YAAQ;AAAG,YAAQ;EACnB,aAAW,EARnB,EAAC,WAAoB,CAAA,OAAM,AAAC,UAAkB,CACtC,CAAA,YAAqB,qBAA2B,CAAA,YAAqB,GAAK,EAAC,OAAM,WAAmB,CAAC,AAD/D,CACgE;EAQtG,aAAW,EATnB,EAAC,kBAAoB,CAAA,OAAM,AAAC,cAAkB,CACtC,CAAA,mBAAqB,4BAA2B,CAAA,mBAAqB,GAAK,EAAC,OAAM,kBAAmB,CAAC,AAD/D,CACgE;EAStG,iBAAe,EAVvB,EAAC,0BAAoB,CAAA,OAAM,AAAC,sBAAkB,CACtC,CAAA,2BAAqB,oCAA2B,CAAA,2BAAqB,GAAK,EAAC,OAAM,0BAAmB,CAAC,AAD/D,CACgE;EAUtG,iBAAe,EAXvB,EAAC,2BAAoB,CAAA,OAAM,AAAC,uBAAkB,CACtC,CAAA,4BAAqB,qCAA2B,CAAA,4BAAqB,GAAK,EAAC,OAAM,2BAAmB,CAAC,AAD/D,CACgE;EAWtG,KAAG,EAZX,EAAC,8CAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,+CAAqB,wDAA2B,CAAA,+CAAqB,GAAK,EAAC,OAAM,8CAAmB,CAAC,AAD/D,CACgE;EAYtG,mBAAiB,EAbzB,EAAC,iCAAoB,CAAA,OAAM,AAAC,0BAAkB,CACtC,CAAA,kCAAqB,2CAA2B,CAAA,kCAAqB,GAAK,EAAC,OAAM,iCAAmB,CAAC,AAD/D,CACgE;EAatG,iBAAe,EAdvB,EAAC,+BAAoB,CAAA,OAAM,AAAC,wBAAkB,CACtC,CAAA,gCAAqB,yCAA2B,CAAA,gCAAqB,GAAK,EAAC,OAAM,+BAAmB,CAAC,AAD/D,CACgE;EActG,YAAU,EAflB,EAAC,qDAAoB,CAAA,OAAM,AAAC,sCAAkB,CACtC,CAAA,sDAAqB,+DAA2B,CAAA,sDAAqB,GAAK,EAAC,OAAM,qDAAmB,CAAC,AAD/D,CACgE;EAgBlG,UAAQ,EAjBpB,EAAC,uCAAoB,CAAA,OAAM,AAAC,2BAAkB,CACtC,CAAA,wCAAqB,iDAA2B,CAAA,wCAAqB,GAAK,EAAC,OAAM,uCAAmB,CAAC,AAD/D,CACgE;AAD9G,AAAI,EAAA,gBAwBG,SAAM,cAAY,CAEX,AAAD,CAAG;AACZ,KAAG,OAAO,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;AACnC,AA5BsC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AA8B3B,IAAE,CAAF,UAAI,SAAQ,AAAK,CAAG,CAAA,SAAQ,AAAa,CAAQ;AAC/C,aAAS,IAAI,AAAC,CAAC,IAAG,OAAO,CAAG,UAAQ,CAAG,UAAQ,CAAC,CAAC;EACnD;AAEA,IAAE,CAAF,UAAI,SAAQ,AAAK,CAAgB;AAC/B,AAAI,MAAA,CAAA,MAAK,EAAI,CAAA,UAAS,IAAI,AAAC,CAAC,IAAG,OAAO,CAAG,UAAQ,CAAC,CAAC;AACnD,SAAO,CAAA,cAAa,AAAC,CAAC,MAAK,CAAC,CAAC;EAC/B;AAEA,MAAI,CAAJ,UAAM,AAAD,CAAQ;AACX,aAAS,MAAM,AAAC,CAAC,IAAG,OAAO,CAAC,CAAC;EAC/B;AAAA,KAzCmF;AAArF,KAAK,eAAe,AAAC,8BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAsBzB,WAAS,AAAC,EAAC,EAtBqC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,2CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YA6BV,IAAG,IAAa,YAAW,GA7BM;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,2CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAiCV,IAAG,GAjC8B;EAAC,CAAC,CAAC,CAAC;AADrD,AAAI,EAAA,WAgDG,SAAM,SAAO,CAWN,MAAK,AAAyB,CAC9B,CAAA,KAAI,AAAc,CAClB,CAAA,gBAAe,AAAkB,CACjC,CAAA,kBAAiB,AAAoB,CACrC,CAAA,WAAU,AAAa,CACvB,CAAA,MAAK,AAA0B,CAC/B,CAAA,gBAAe,AAAkB,CAAG;AAC9C,KAAG,QAAQ,EAAI,OAAK,CAAC;AACrB,KAAG,eAAe,EAAI,MAAI,CAAC;AAC3B,KAAG,WAAW,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;AACrC,KAAG,kBAAkB,EAAI,iBAAe,CAAC;AACzC,KAAG,oBAAoB,EAAI,mBAAiB,CAAC;AAC7C,KAAG,aAAa,EAAI,YAAU,CAAC;AAC/B,KAAG,QAAQ,EAAI,CAAA,WAAU,QAAQ,AAAC,CAAC,IAAG,CAAG,KAAG,CAAC,CAAC;AAC9C,KAAG,QAAQ,EAAI,OAAK,CAAC;AACrB,KAAG,kBAAkB,EAAI,iBAAe,CAAC;AAC3C,AA3EsC,CAAA;AAAxC,AAAI,EAAA,qBAAoC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AA6E3B,eAAa,CAAb,UAAe,sBAAqB,CAAoB;AACtD,OAAI,sBAAqB,WAAa,iBAAe,CAAG;AACtD,WAAO,uBAAqB,CAAC;IAC/B,KAAO,KAAI,sBAAqB,WAAa,QAAM,CAAG;AACpD,AAAI,QAAA,CAAA,IAAG,EAAI,CAAA,IAAG,QAAQ,KAAK,AAAC,CAAC,sBAAqB,MAAM,CAAC,CAAC;AAC1D,WAAO,CAAA,gBAAe,kBAAkB,AAAC,CAAC,sBAAqB,CAAG,CAAA,IAAG,WAAW,CAAC,CAAC;IACpF,KAAO;AACL,AAAI,QAAA,CAAA,SAAG,EAAI,CAAA,IAAG,QAAQ,KAAK,AAAC,CAAC,sBAAqB,CAAC,CAAC;AACpD,WAAO,CAAA,gBAAe,eAAe,AAAC,CAAC,cAAQ,CAAG,qBAAc,CAAC,CAAC;IACpE;AAAA,EACF;AAIA,cAAY,CAAZ,UAAc,sBAAqB,AAAI;;AACrC,AAAI,MAAA,CAAA,gBAAe,EAAI,CAAA,IAAG,eAAe,AAAC,CAAC,sBAAqB,CAAC,CAAC;AAClE,OAAG,uBAAuB,AAAC,CAAC,gBAAe,CAAC,CAAC;AAE7C,AAAI,MAAA,CAAA,iBAAgB,EAAI,CAAA,8BAA4B,AAAC,CAAC,gBAAe,CAAC,CAAC;AACvE,SAAO,CAAA,IAAG,QAAQ,YAAY,AAAC,CAAC,iBAAgB,CAAC,KAAK,AAAC,EAAE,SAAC,YAAW,CAAM;AACzE,WAAO,CAAA,8BAA4B,AAAC,CAAC,IAAG,CAAG,KAAG,CAAG,aAAW,CAAG,EAAC,gBAAe,CAAC,CAAG,KAAG,CAAC,CAAC;IAC1F,EAAC,KAAK,AAAC,EAAE,SAAC,YAAW,CAAM;AACzB,WAAO,IAAI,aAAW,AAAC,CAAC,YAAW,CAAC,CAAC;IACvC,EAAC,CAAC;EACJ;AAEA,QAAM,CAAN,UAAQ,SAAQ,AAAM;AACpB,AAAI,MAAA,CAAA,gBAAe,EAAI,CAAA,IAAG,eAAe,AAAC,CAAC,SAAQ,CAAC,CAAC;AACrD,OAAG,uBAAuB,AAAC,CAAC,gBAAe,CAAC,CAAC;AAC7C,AAAI,MAAA,CAAA,SAAQ,EAAI,CAAA,IAAG,SAAS,AAAC,CAAC,gBAAe,CAAC,CAAC;AAC/C,AAAI,MAAA,CAAA,SAAQ,EAAI,CAAA,cAAa,UAAU,AAAC,CAAC,SAAQ,CAAC,CAAA,CAAI,UAAQ,EAAI,CAAA,cAAa,QAAQ,AAAC,CAAC,SAAQ,CAAC,CAAC;AACnG,SAAO,CAAA,SAAQ,KAAK,AAAC,EAAE,SAAC,YAAW,CAAM;AACvC,WAAO,IAAI,aAAW,AAAC,CAAC,YAAW,CAAC,CAAC;IACvC,EAAC,CAAC;EACJ;AAGA,SAAO,CAAP,UAAS,gBAAe,AAAkB;;AACxC,AAAI,MAAA,CAAA,SAAQ,EAAI,CAAA,gBAAe,IAAI,MAAM,CAAC;AAC1C,AAAI,MAAA,CAAA,SAAQ,EAAI,CAAA,IAAG,eAAe,IAAI,AAAC,CAAC,SAAQ,CAAC,CAAC;AAClD,OAAI,SAAQ,AAAC,CAAC,SAAQ,CAAC,CAAG;AAIxB,WAAO,UAAQ,CAAC;IAClB;AAAA,AAEI,MAAA,CAAA,SAAQ,EAAI,CAAA,UAAS,IAAI,AAAC,CAAC,IAAG,WAAW,CAAG,UAAQ,CAAC,CAAC;AAC1D,OAAI,SAAQ,AAAC,CAAC,SAAQ,CAAC,CAAG;AAIxB,WAAO,UAAQ,CAAC;IAClB;AAAA,AACI,MAAA,CAAA,QAAO,EAAI,CAAA,IAAG,kBAAkB,QAAQ,AAAC,CAAC,SAAQ,CAAC,CAAC;AACxD,OAAI,OAAM,AAAC,CAAC,QAAO,CAAC,CAAG;AACrB,WAAO,KAAG,CAAC;IACb;AAAA,AACI,MAAA,CAAA,UAAS,EAAI,CAAA,WAAU,IAAI,AAAC,CAC9B,IAAG,mBAAmB,AAAC,CAAC,QAAO,CAAC,GAChC,SAAC,SAAQ;WAAM,CAAA,oBAAkB,AAAC,CAAC,SAAQ,CAAC;IAAA,EAC9C,CAAC;AACD,AAAI,MAAA,CAAA,cAAa,EAAI,CAAA,IAAG,qBAAqB,AAAC,CAAC,SAAQ,CAAG,SAAO,CAAG,WAAS,CAAC,CAAC;AAC/E,YAAQ,EAAI,CAAA,IAAG,QAAQ,QAAQ,AAAC,CAAC,cAAa,CAAC,KAAK,AAAC,EAAE,SAAC,QAAO,CAAM;AACnE,WAAO,CAAA,8BAA4B,AAAC,CAAC,IAAG,CAAG,iBAAe,CAAG,SAAO,CAAG,WAAS,CAAG,KAAG,CAAC,CAAC;IAC1F,EAAC,CAAC;AAEF,aAAS,IAAI,AAAC,CAAC,IAAG,WAAW,CAAG,UAAQ,CAAG,UAAQ,CAAC,CAAC;AACrD,SAAO,UAAQ,CAAC;EAClB;AAGA,yBAAuB,CAAvB,UAAyB,eAAc,CAAG,CAAA,gBAAe,CAAG,CAAA,QAAO,CAAG,CAAA,UAAS,CAAG,CAAA,mBAAkB;;AAClG,AAAI,MAAA,CAAA,gBAAe,EAAI,GAAC,CAAC;AACzB,AAAI,MAAA,CAAA,SAAQ,EAAI,CAAA,IAAG,kBAAkB,gBAAgB,AAAC,CAAC,eAAc,CAAG,iBAAe,CAAG,SAAO,CAAG,WAAS,CAAC,CAAC;AAC/G,OAAI,mBAAkB,GAAK,CAAA,SAAQ,AAAC,CAAC,gBAAe,CAAC,CAAG;AAGtD,AAAI,QAAA,CAAA,SAAQ,EAAI,CAAA,gBAAe,IAAI,MAAM,CAAC;AAC1C,SAAG,eAAe,IAAI,AAAC,CAAC,SAAQ,CAAG,UAAQ,CAAC,CAAC;AAC7C,eAAS,OAAO,AAAC,CAAC,IAAG,WAAW,CAAG,UAAQ,CAAC,CAAC;IAC/C;AAAA,AAEI,MAAA,CAAA,WAAU,EAAI,EAAA,CAAC;AACnB,cAAU,QAAQ,AAAC,CAAC,SAAQ,eAAe,GAAG,SAAC,aAAY;AACzD,AAAI,QAAA,CAAA,eAAc,EAAI,CAAA,aAAY,mBAAmB,CAAC;AACtD,AAAI,QAAA,CAAA,qBAAoB,EAAI,CAAA,QAAO,eAAe,CAAE,WAAU,CAAC,gBAAgB,CAAC;AAChF,AAAI,QAAA,CAAA,iBAAgB,IAAI,SAAC,QAAO,CAAM;AACpC,oBAAY,gBAAgB,EAAI,SAAO,CAAC;MAC1C,CAAA,CAAC;AACD,AAAI,QAAA,CAAA,UAAS,EAAI,KAAG,CAAC;AACrB,SAAI,SAAQ,AAAC,CAAC,eAAc,CAAC,CAAG;AAC9B,iBAAS,EAAI,CAAA,cAAY,AAAC,CAAC,eAAc,CAAC,CAAC;MAC7C,KAAO,KAAI,SAAQ,AAAC,CAAC,qBAAoB,CAAC,CAAG;AAC3C,iBAAS,EAAI,CAAA,8BAA4B,AAAC,CAAC,SAAQ,CAAG,iBAAe,CAAG,sBAAoB,CAAG,WAAS,CAAG,MAAI,CAAC,CAAC;MACnH;AAAA,AACA,SAAI,cAAa,UAAU,AAAC,CAAC,UAAS,CAAC,CAAG;AACxC,kBAAU,KAAK,AAAC,CAAC,gBAAe,CAAG,CAAA,UAAS,KAAK,AAAC,CAAC,iBAAgB,CAAC,CAAC,CAAC;MACxE,KAAO,KAAI,SAAQ,AAAC,CAAC,UAAS,CAAC,CAAG;AAChC,wBAAgB,AAAC,CAAC,UAAS,CAAC,CAAC;MAC/B;AAAA,AACA,gBAAU,EAAE,CAAC;IACf,EAAC,CAAC;AAEF,AAAI,MAAA,CAAA,aAAY,IAAI,SAAC,CAAA,CAAM;AACzB,WAAO,UAAQ,CAAC;IAClB,CAAA,CAAC;AACD,OAAI,gBAAe,OAAO,EAAI,EAAA,CAAG;AAC/B,WAAO,CAAA,cAAa,IAAI,AAAC,CAAC,gBAAe,CAAC,KAAK,AAAC,CAAC,aAAY,CAAC,CAAC;IACjE,KAAO;AACL,WAAO,CAAA,aAAY,AAAC,CAAC,IAAG,CAAC,CAAC;IAC5B;AAAA,EACF;AAEA,qBAAmB,CAAnB,UAAqB,SAAQ,CAAG,CAAA,IAAG,CAAG,CAAA,UAAS,CAA6B;AAC1E,AAAI,MAAA,CAAA,YAAW,EAAI,CAAA,IAAG,aAAa,QAAQ,AAAC,CACxC,IAAG,QAAQ,CAAG,CAAA,IAAG,oBAAoB,OAAO,AAAC,CAAC,SAAQ,CAAC,CAC3D,CAAC;AACD,AAAI,MAAA,CAAA,cAAa,EAAI,KAAG,CAAC;AACzB,OAAI,SAAQ,AAAC,CAAC,IAAG,YAAY,CAAC,CAAG;AAC/B,mBAAa,EAAI,CAAA,IAAG,aAAa,QAAQ,AAAC,CAAC,YAAW,CAAG,CAAA,IAAG,YAAY,CAAC,CAAC;IAC5E,KAAO,KAAI,SAAQ,AAAC,CAAC,IAAG,SAAS,CAAC,CAAG;AAInC,mBAAa,EAAI,aAAW,CAAC;IAC/B;AAAA,AACA,SAAO,IAAI,CAAA,SAAQ,eAAe,AAAC,CAAC;AAClC,gBAAU,CAAG,CAAA,SAAQ,AAAC,CAAC,SAAQ,CAAC;AAChC,WAAK,CAAG,eAAa;AACrB,aAAO,CAAG,CAAA,IAAG,SAAS;AACtB,eAAS,CAAG,CAAA,WAAU,IAAI,AAAC,CAAC,UAAS,CAAG,+BAA4B,CAAC;AAAA,IACvE,CAAC,CAAC;EACJ;AA+BA,mBAAiB,CAAjB,UAAmB,QAAO,AAAM,CAAc;AAC5C,OAAI,OAAM,AAAC,CAAC,QAAO,WAAW,CAAC;AAAG,WAAO,GAAC,CAAC;AAAA,AAEvC,MAAA,CAAA,UAAS,EAAI,GAAC,CAAC;AACnB,OAAG,aAAa,AAAC,CAAC,QAAO,WAAW,CAAG,WAAS,CAAC,CAAC;AAElD,SAAO,WAAS,CAAC;EACnB;AAEA,aAAW,CAAX,UAAa,IAAG,AAAU,CAAG,CAAA,GAAE,AAAW,CAAQ;AAChD,QAAS,GAAA,CAAA,CAAA,EAAI,EAAA,CAAG,CAAA,CAAA,EAAI,CAAA,IAAG,OAAO,CAAG,CAAA,CAAA,EAAE,CAAG;AACpC,AAAI,QAAA,CAAA,IAAG,EAAI,CAAA,IAAG,CAAE,CAAA,CAAC,CAAC;AAClB,SAAI,WAAU,OAAO,AAAC,CAAC,IAAG,CAAC,CAAG;AAC5B,WAAG,aAAa,AAAC,CAAC,IAAG,CAAG,IAAE,CAAC,CAAC;MAC9B,KAAO;AACL,kBAAU,KAAK,AAAC,CAAC,GAAE,CAAG,KAAG,CAAC,CAAC;MAC7B;AAAA,IACF;AAAA,EACF;AAEA,uBAAqB,CAArB,UAAuB,gBAAe,AAAiB,CAAQ;AAC7D,OAAI,CAAC,CAAC,gBAAe,WAAW,WAAa,UAAQ,CAAC,CAAG;AACvD,UAAM,IAAI,cAAY,AAAC,EAAC,kBAAkB,EAAC,CAAA,SAAQ,AAAC,CAAC,gBAAe,IAAI,MAAM,CAAC,CAAA,CAAC,mCAAiC,EAAC,CAAC;IACrH;AAAA,EACF;AAAA,GArDO,oBAAmB,CAA1B,UAA4B,gBAAe;AACzC,AAAI,MAAA,CAAA,GAAE,EAAI,CAAA,gBAAe,WAAW,CAAC;AACrC,AAAI,MAAA,CAAA,UAAS,CAAC;AACd,AAAI,MAAA,CAAA,eAAc,EAAI,CAAA,GAAE,gBAAgB,CAAC;AACzC,OAAI,GAAE,WAAa,UAAQ,CAAG;AAC5B,eAAS,EAAI,CAAA,SAAQ,kBAAkB,eAAe,CAAC;IACzD,KAAO;AACL,eAAS,EAAI,CAAA,SAAQ,kBAAkB,eAAe,CAAC;IACzD;AAAA,AACI,MAAA,CAAA,cAAa,EAAI,GAAC,CAAC;AACvB,cAAU,QAAQ,AAAC,CAAC,gBAAe,aAAa,GAAG,SAAC,GAAE,CAAM;AAC1D,SAAI,SAAQ,AAAC,CAAC,GAAE,cAAc,CAAC,CAAG;AAChC,kBAAU,KAAK,AAAC,CAAC,cAAa,CAAG,CAAA,GAAE,cAAc,CAAC,CAAC;MACrD;AAAA,IACF,EAAC,CAAC;AACF,SAAO,IAAI,CAAA,SAAQ,kBAAkB,AAAC,CAAC;AACrC,OAAC,CAAG,CAAA,SAAQ,AAAC,CAAC,gBAAe,IAAI,MAAM,CAAC;AACxC,SAAG,CAAG,WAAS;AACf,aAAO,CAAG,CAAA,GAAE,SAAS;AACrB,oBAAc,CAAG,gBAAc;AAC/B,kBAAY,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,cAAc,CAAC,CAAA,CAAI,CAAA,UAAS,oBAAoB,AAAC,CAAC,GAAE,cAAc,CAAC,CAAA,CAAI,KAAG;AACrG,mBAAa,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,eAAe,CAAC,CAAA,CAAI,CAAA,UAAS,oBAAoB,AAAC,CAAC,GAAE,eAAe,CAAC,CAAA,CAAI,KAAG;AACxG,mBAAa,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,eAAe,CAAC,CAAA,CAAI,CAAA,UAAS,oBAAoB,AAAC,CAAC,GAAE,eAAe,CAAC,CAAA,CAAI,KAAG;AACxG,gBAAU,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,YAAY,CAAC,CAAA,CAAI,CAAA,UAAS,oBAAoB,AAAC,CAAC,GAAE,YAAY,CAAC,CAAA,CAAI,KAAG;AAC/F,eAAS,CAAG,CAAA,SAAQ,AAAC,CAAC,GAAE,WAAW,CAAC,CAAA,CAAI,CAAA,UAAS,oBAAoB,AAAC,CAAC,GAAE,WAAW,CAAC,CAAA,CAAI,KAAG;AAC5F,mBAAa,CAAG,eAAa;AAAA,IAC/B,CAAC,CAAC;EACJ,EA/OmF;AAArF,KAAK,eAAe,AAAC,yBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cA8CzB,WAAS,AAAC,EAAC,EA9CqC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,wBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YA0DJ,uBAAsB,IACxB,aAAY,IACA,gBAAe,IACb,kBAAiB,IACxB,WAAU,IACf,SAAQ,eAAe,IACb,gBAAe,GAhEE;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,gDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,eAAc,KAAO,OAC4B;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,0CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAsGL,IAAG,GAtGyB;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,2CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAiHG,gBAAe,GAjHK;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,qDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAgPK,IAAG,GAhPe;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,+CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,eAAc,YAAc,AA0PR,CAAA,IAAG,CA1PvB,CAAA,eAAc,KAAO,KA0PO,AA1PmB,IAA/C,eAAc,YAAc,AA0PO,CAAA,IAAG,CAAE,KAAG,CAAC,AA1PG,GACE;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,yDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAoQgB,gBAAe,GApQR;EAAC,CAAC,CAAC,CAAC;AA0QrD","file":"angular2/src/core/compiler/compiler.js","sourcesContent":["import {Binding} from 'angular2/di';\nimport {Injectable} from 'angular2/src/di/annotations_impl';\nimport {Type, isBlank, isPresent, BaseException, normalizeBlank, stringify} from 'angular2/src/facade/lang';\nimport {Promise, PromiseWrapper} from 'angular2/src/facade/async';\nimport {List, ListWrapper, Map, MapWrapper} from 'angular2/src/facade/collection';\n\nimport {DirectiveMetadataReader} from './directive_metadata_reader';\nimport {Component, Directive} from '../annotations_impl/annotations';\nimport {AppProtoView} from './view';\nimport {ProtoViewRef} from './view_ref';\nimport {DirectiveBinding} from './element_injector';\nimport {TemplateResolver} from './template_resolver';\nimport {View} from '../annotations_impl/view';\nimport {ComponentUrlMapper} from './component_url_mapper';\nimport {ProtoViewFactory} from './proto_view_factory';\nimport {UrlResolver} from 'angular2/src/services/url_resolver';\n\nimport * as renderApi from 'angular2/src/render/api';\n\n/**\n * Cache that stores the AppProtoView of the template of a component.\n * Used to prevent duplicate work and resolve cyclic dependencies.\n */\n@Injectable()\nexport class CompilerCache {\n  _cache:Map;\n  constructor() {\n    this._cache = MapWrapper.create();\n  }\n\n  set(component:Type, protoView:AppProtoView):void {\n    MapWrapper.set(this._cache, component, protoView);\n  }\n\n  get(component:Type):AppProtoView {\n    var result = MapWrapper.get(this._cache, component);\n    return normalizeBlank(result);\n  }\n\n  clear():void {\n    MapWrapper.clear(this._cache);\n  }\n}\n\n/**\n * @exportedAs angular2/view\n */\n@Injectable()\nexport class Compiler {\n  _reader: DirectiveMetadataReader;\n  _compilerCache:CompilerCache;\n  _compiling:Map<Type, Promise>;\n  _templateResolver: TemplateResolver;\n  _componentUrlMapper: ComponentUrlMapper;\n  _urlResolver: UrlResolver;\n  _appUrl: string;\n  _render: renderApi.RenderCompiler;\n  _protoViewFactory:ProtoViewFactory;\n\n  constructor(reader: DirectiveMetadataReader,\n              cache:CompilerCache,\n              templateResolver: TemplateResolver,\n              componentUrlMapper: ComponentUrlMapper,\n              urlResolver: UrlResolver,\n              render: renderApi.RenderCompiler,\n              protoViewFactory: ProtoViewFactory) {\n    this._reader = reader;\n    this._compilerCache = cache;\n    this._compiling = MapWrapper.create();\n    this._templateResolver = templateResolver;\n    this._componentUrlMapper = componentUrlMapper;\n    this._urlResolver = urlResolver;\n    this._appUrl = urlResolver.resolve(null, './');\n    this._render = render;\n    this._protoViewFactory = protoViewFactory;\n  }\n\n  _bindDirective(directiveTypeOrBinding):DirectiveBinding {\n    if (directiveTypeOrBinding instanceof DirectiveBinding) {\n      return directiveTypeOrBinding;\n    } else if (directiveTypeOrBinding instanceof Binding) {\n      let meta = this._reader.read(directiveTypeOrBinding.token);\n      return DirectiveBinding.createFromBinding(directiveTypeOrBinding, meta.annotation);\n    } else {\n      let meta = this._reader.read(directiveTypeOrBinding);\n      return DirectiveBinding.createFromType(meta.type, meta.annotation);\n    }\n  }\n\n  // Create a hostView as if the compiler encountered <hostcmp></hostcmp>.\n  // Used for bootstrapping.\n  compileInHost(componentTypeOrBinding:any):Promise<ProtoViewRef> {\n    var componentBinding = this._bindDirective(componentTypeOrBinding);\n    this._assertTypeIsComponent(componentBinding);\n\n    var directiveMetadata = Compiler.buildRenderDirective(componentBinding);\n    return this._render.compileHost(directiveMetadata).then( (hostRenderPv) => {\n      return this._compileNestedProtoViews(null, null, hostRenderPv, [componentBinding], true);\n    }).then( (appProtoView) => {\n      return new ProtoViewRef(appProtoView);\n    });\n  }\n\n  compile(component: Type):Promise<ProtoViewRef> {\n    var componentBinding = this._bindDirective(component);\n    this._assertTypeIsComponent(componentBinding);\n    var protoView = this._compile(componentBinding);\n    var pvPromise = PromiseWrapper.isPromise(protoView) ? protoView : PromiseWrapper.resolve(protoView);\n    return pvPromise.then( (appProtoView) => {\n      return new ProtoViewRef(appProtoView);\n    });\n  }\n\n  // TODO(vicb): union type return AppProtoView or Promise<AppProtoView>\n  _compile(componentBinding: DirectiveBinding) {\n    var component = componentBinding.key.token;\n    var protoView = this._compilerCache.get(component);\n    if (isPresent(protoView)) {\n      // The component has already been compiled into an AppProtoView,\n      // returns a plain AppProtoView, not wrapped inside of a Promise.\n      // Needed for recursive components.\n      return protoView;\n    }\n\n    var pvPromise = MapWrapper.get(this._compiling, component);\n    if (isPresent(pvPromise)) {\n      // The component is already being compiled, attach to the existing Promise\n      // instead of re-compiling the component.\n      // It happens when a template references a component multiple times.\n      return pvPromise;\n    }\n    var template = this._templateResolver.resolve(component);\n    if (isBlank(template)) {\n      return null;\n    }\n    var directives = ListWrapper.map(\n      this._flattenDirectives(template),\n      (directive) => this._bindDirective(directive)\n    );\n    var renderTemplate = this._buildRenderTemplate(component, template, directives);\n    pvPromise = this._render.compile(renderTemplate).then( (renderPv) => {\n      return this._compileNestedProtoViews(null, componentBinding, renderPv, directives, true);\n    });\n\n    MapWrapper.set(this._compiling, component, pvPromise);\n    return pvPromise;\n  }\n\n  // TODO(tbosch): union type return AppProtoView or Promise<AppProtoView>\n  _compileNestedProtoViews(parentProtoView, componentBinding, renderPv, directives, isComponentRootView) {\n    var nestedPVPromises = [];\n    var protoView = this._protoViewFactory.createProtoView(parentProtoView, componentBinding, renderPv, directives);\n    if (isComponentRootView && isPresent(componentBinding)) {\n      // Populate the cache before compiling the nested components,\n      // so that components can reference themselves in their template.\n      var component = componentBinding.key.token;\n      this._compilerCache.set(component, protoView);\n      MapWrapper.delete(this._compiling, component);\n    }\n\n    var binderIndex = 0;\n    ListWrapper.forEach(protoView.elementBinders, (elementBinder) => {\n      var nestedComponent = elementBinder.componentDirective;\n      var nestedRenderProtoView = renderPv.elementBinders[binderIndex].nestedProtoView;\n      var elementBinderDone = (nestedPv) => {\n        elementBinder.nestedProtoView = nestedPv;\n      };\n      var nestedCall = null;\n      if (isPresent(nestedComponent)) {\n        nestedCall = this._compile(nestedComponent);\n      } else if (isPresent(nestedRenderProtoView)) {\n        nestedCall = this._compileNestedProtoViews(protoView, componentBinding, nestedRenderProtoView, directives, false);\n      }\n      if (PromiseWrapper.isPromise(nestedCall)) {\n        ListWrapper.push(nestedPVPromises, nestedCall.then(elementBinderDone));\n      } else if (isPresent(nestedCall)) {\n        elementBinderDone(nestedCall);\n      }\n      binderIndex++;\n    });\n\n    var protoViewDone = (_) => {\n      return protoView;\n    };\n    if (nestedPVPromises.length > 0) {\n      return PromiseWrapper.all(nestedPVPromises).then(protoViewDone);\n    } else {\n      return protoViewDone(null);\n    }\n  }\n\n  _buildRenderTemplate(component, view, directives): renderApi.ViewDefinition {\n    var componentUrl = this._urlResolver.resolve(\n        this._appUrl, this._componentUrlMapper.getUrl(component)\n    );\n    var templateAbsUrl = null;\n    if (isPresent(view.templateUrl)) {\n      templateAbsUrl = this._urlResolver.resolve(componentUrl, view.templateUrl);\n    } else if (isPresent(view.template)) {\n      // Note: If we have an inline template, we also need to send\n      // the url for the component to the render so that it\n      // is able to resolve urls in stylesheets.\n      templateAbsUrl = componentUrl;\n    }\n    return new renderApi.ViewDefinition({\n      componentId: stringify(component),\n      absUrl: templateAbsUrl,\n      template: view.template,\n      directives: ListWrapper.map(directives, Compiler.buildRenderDirective)\n    });\n  }\n\n  static buildRenderDirective(directiveBinding):renderApi.DirectiveMetadata {\n    var ann = directiveBinding.annotation;\n    var renderType;\n    var compileChildren = ann.compileChildren;\n    if (ann instanceof Component) {\n      renderType = renderApi.DirectiveMetadata.COMPONENT_TYPE;\n    } else {\n      renderType = renderApi.DirectiveMetadata.DIRECTIVE_TYPE;\n    }\n    var readAttributes = [];\n    ListWrapper.forEach(directiveBinding.dependencies, (dep) => {\n      if (isPresent(dep.attributeName)) {\n        ListWrapper.push(readAttributes, dep.attributeName);\n      }\n    });\n    return new renderApi.DirectiveMetadata({\n      id: stringify(directiveBinding.key.token),\n      type: renderType,\n      selector: ann.selector,\n      compileChildren: compileChildren,\n      hostListeners: isPresent(ann.hostListeners) ? MapWrapper.createFromStringMap(ann.hostListeners) : null,\n      hostProperties: isPresent(ann.hostProperties) ? MapWrapper.createFromStringMap(ann.hostProperties) : null,\n      hostAttributes: isPresent(ann.hostAttributes) ? MapWrapper.createFromStringMap(ann.hostAttributes) : null,\n      hostActions: isPresent(ann.hostActions) ? MapWrapper.createFromStringMap(ann.hostActions) : null,\n      properties: isPresent(ann.properties) ? MapWrapper.createFromStringMap(ann.properties) : null,\n      readAttributes: readAttributes\n    });\n  }\n\n  _flattenDirectives(template: View):List<Type> {\n    if (isBlank(template.directives)) return [];\n\n    var directives = [];\n    this._flattenList(template.directives, directives);\n\n    return directives;\n  }\n\n  _flattenList(tree:List<any>, out:List<Type>):void {\n    for (var i = 0; i < tree.length; i++) {\n      var item = tree[i];\n      if (ListWrapper.isList(item)) {\n        this._flattenList(item, out);\n      } else {\n        ListWrapper.push(out, item);\n      }\n    }\n  }\n\n  _assertTypeIsComponent(directiveBinding:DirectiveBinding):void {\n    if (!(directiveBinding.annotation instanceof Component)) {\n      throw new BaseException(`Could not load '${stringify(directiveBinding.key.token)}' because it is not a component.`);\n    }\n  }\n}\n"]}