{"version":3,"sources":["element_ref.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;YAArC,EAAC,GAAE,YAAqB;AAAE,uBAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;;;;EAAlD,IAAE,EAAV,EAAC,+CAAoB,CAAA,OAAM,AAAC,gCAAkB,CACtC,CAAA,gDAAqB,yDAA2B,CAAA,gDAAqB,GAAK,EAAC,OAAM,+CAAmB,CAAC,AAD/D,CACgE;EAAtG,eAAa,EADrB,EAAC,wCAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,yCAAqB,kDAA2B,CAAA,yCAAqB,GAAK,EAAC,OAAM,wCAAmB,CAAC,AAD/D,CACgE;EACtG,QAAM,EAFd,EAAC,kBAAoB,CAAA,OAAM,AAAC,cAAkB,CACtC,CAAA,mBAAqB,4BAA2B,CAAA,mBAAqB,GAAK,EAAC,OAAM,kBAAmB,CAAC,AAD/D,CACgE;EAEtG,uBAAqB,EAH7B,EAAC,uDAAoB,CAAA,OAAM,AAAC,qCAAkB,CACtC,CAAA,wDAAqB,iEAA2B,CAAA,wDAAqB,GAAK,EAAC,OAAM,uDAAmB,CAAC,AAD/D,CACgE;AAD9G,AAAI,EAAA,aAQG,SAAM,WAAS,CAIR,UAAS,AAAQ,CAAG,CAAA,iBAAgB,AAAO,CAAG;AACxD,KAAG,WAAW,EAAI,WAAS,CAAC;AAC5B,KAAG,kBAAkB,EAAI,kBAAgB,CAAC;AAC5C,AAfsC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AAwB3B,IAAI,WAAS,EAAI;AACf,SAAO,CAAA,sBAAqB,AAAC,CAAC,IAAG,WAAW,OAAO,CAAC,cAAc,CAAE,IAAG,kBAAkB,CAAC,CAAC;EAC7F;AASA,aAAW,CAAX,UAAa,IAAG,AAAO,CAAU;AAC/B,SAAO,CAAA,cAAa,AAAC,CAAC,GAAE,aAAa,AAAC,CAAC,IAAG,WAAW,CAAG,KAAG,CAAC,CAAC,CAAC;EAChE;AAAA,KArCmF;AAArF,KAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAWD,OAAM,IAZ/B,eAAc,KAAO,UAC4B;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,iDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAD1B,eAAc,KAAO,UAC4B;EAAC,CAAC,CAAC,CAAC;AAsCrD","file":"angular2/src/core/compiler/element_ref.js","sourcesContent":["import {DOM} from 'angular2/src/dom/dom_adapter';\nimport {normalizeBlank} from 'angular2/src/facade/lang';\nimport {ViewRef} from './view_ref';\nimport {resolveInternalDomView} from 'angular2/src/render/dom/view/view';\n\n/**\n * @exportedAs angular2/view\n */\nexport class ElementRef {\n  parentView:ViewRef;\n  boundElementIndex:number;\n\n  constructor(parentView:ViewRef, boundElementIndex:number) {\n    this.parentView = parentView;\n    this.boundElementIndex = boundElementIndex;\n  }\n\n  /**\n   * Exposes the underlying DOM element.\n   * (DEPRECATED way of accessing the DOM, replacement coming)\n   */\n  // TODO(tbosch): Here we expose the real DOM element.\n  // We need a more general way to read/write to the DOM element\n  // via a proper abstraction in the render layer\n  get domElement() {\n    return resolveInternalDomView(this.parentView.render).boundElements[this.boundElementIndex];\n  }\n\n  /**\n   * Gets an attribute from the underlying DOM element.\n   * (DEPRECATED way of accessing the DOM, replacement coming)\n   */\n  // TODO(tbosch): Here we expose the real DOM element.\n  // We need a more general way to read/write to the DOM element\n  // via a proper abstraction in the render layer\n  getAttribute(name:string):string {\n    return normalizeBlank(DOM.getAttribute(this.domElement, name));\n  }\n}\n"]}