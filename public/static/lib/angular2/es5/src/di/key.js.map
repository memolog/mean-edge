{"version":3,"sources":["key.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,kFAAoB,UAAS,SAAQ;;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,iBAAoB,KAAG,WAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,gBAAoB,KAAG,UAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,cAAQ,AAAC,eAAoB,KAAG,aAAmB,CAAC;IAE5C,CADuB;AACzB,UAAM;AAFZ,YAAA,SAAQ,AAAC;AAiBF,eAAM,IAAE,CAIC,KAAI,CAAG,CAAA,EAAC,CAAG;AACnB,aAAG,MAAM,EAAI,MAAI,CAAC;AAClB,aAAG,GAAG,EAAI,GAAC,CAAC;QAChB;AAtBM,AAgCV,aAhCiB,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,OAuB1C,GAAI,YAAU,EAAI;AAAE,iBAAO,CAAA,SAAQ,AAAC,CAAC,IAAG,MAAM,CAAC,CAAC;UAAE;AAI3C,YAAE,CAAT,UAAW,KAAI,CAAG;AAAE,iBAAO,CAAA,kBAAiB,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC;UAAE;AAI1D,YAAW,aAAW,EAAI;AAAE,iBAAO,CAAA,kBAAiB,aAAa,CAAC;UAAE;AAAA,SA9BR,CAAC;MACzD,AAAC,EAAC,CAJ0B,CAAA;AAApC,cAAQ,AAAC,YAAqC,CAAA;AAA9C,oBAAA,SAAQ,AAAC;AAsCF,eAAM,YAAU,CACR,AAAC,CAAE;AACV,aAAG,SAAS,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;QACvC;AAvCM,AAyDV,aAzDiB,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAwC1C,YAAE,CAAF,UAAI,KAAI,CAAG;AACP,eAAI,KAAI,WAAa,IAAE;AACnB,mBAAO,MAAI,CAAC;AAAA,AAEZ,cAAA,CAAA,QAAO,EAAI,MAAI,CAAC;AACpB,eAAI,KAAI,WAAa,YAAU,CAAG;AAC9B,qBAAO,EAAI,CAAA,KAAI,KAAK,CAAC;YACzB;AAAA,AACA,gBAAI,EAAI,SAAO,CAAC;AAChB,eAAI,UAAS,SAAS,AAAC,CAAC,IAAG,SAAS,CAAG,MAAI,CAAC,CAAG;AAC3C,mBAAO,CAAA,UAAS,IAAI,AAAC,CAAC,IAAG,SAAS,CAAG,MAAI,CAAC,CAAC;YAC/C;AAAA,AACI,cAAA,CAAA,MAAK,EAAI,IAAI,IAAE,AAAC,CAAC,KAAI,CAAG,CAAA,GAAE,aAAa,CAAC,CAAC;AAC7C,qBAAS,IAAI,AAAC,CAAC,IAAG,SAAS,CAAG,MAAI,CAAG,OAAK,CAAC,CAAC;AAC5C,iBAAO,OAAK,CAAC;UACjB;AACA,YAAI,aAAW,EAAI;AAAE,iBAAO,CAAA,UAAS,KAAK,AAAC,CAAC,IAAG,SAAS,CAAC,CAAC;UAAE;AAAA,aAvDA,CAAC;MACzD,AAAC,EAAC,CAJ0B,CAAA;AAApC,cAAQ,AAAC,4BAAqC,CAAA;yBA4DrB,IAAI,YAAU,AAAC,EAAC;IA1DV;EAC3B,CAAA;AADI,CAAC,CAAC;AA2DoB","file":"src/di/key.js","sourceRoot":"/Users/yamaguchi/Desktop/mean-edge/node_modules/angular2/es6/dev/","sourcesContent":["import { MapWrapper } from 'angular2/src/facade/collection';\r\nimport { stringify } from 'angular2/src/facade/lang';\r\nimport { TypeLiteral } from './type_literal';\r\nexport { TypeLiteral } from './type_literal';\r\n// TODO: uncoment `int` once https://github.com/angular/angular/issues/1414 is fixed\r\n/**\r\n * A unique object used for retrieving items from the {@link Injector}.\r\n *\r\n * Keys have:\r\n * - a system-wide unique `id`.\r\n * - a `token`, usually the `Type` of the instance.\r\n *\r\n * Keys are used internally by the {@link Injector} because their system-wide unique `id`s allow the\r\n * injector to index in arrays rather than looking up items in maps.\r\n *\r\n * @exportedAs angular2/di\r\n */\r\nexport class Key {\r\n    /**\r\n     * @private\r\n     */\r\n    constructor(token, id) {\r\n        this.token = token;\r\n        this.id = id;\r\n    }\r\n    get displayName() { return stringify(this.token); }\r\n    /**\r\n     * Retrieves a `Key` for a token.\r\n     */\r\n    static get(token) { return _globalKeyRegistry.get(token); }\r\n    /**\r\n     * @returns the number of keys registered in the system.\r\n     */\r\n    static get numberOfKeys() { return _globalKeyRegistry.numberOfKeys; }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class KeyRegistry {\r\n    constructor() {\r\n        this._allKeys = MapWrapper.create();\r\n    }\r\n    get(token) {\r\n        if (token instanceof Key)\r\n            return token;\r\n        // TODO: workaround for https://github.com/Microsoft/TypeScript/issues/3123\r\n        var theToken = token;\r\n        if (token instanceof TypeLiteral) {\r\n            theToken = token.type;\r\n        }\r\n        token = theToken;\r\n        if (MapWrapper.contains(this._allKeys, token)) {\r\n            return MapWrapper.get(this._allKeys, token);\r\n        }\r\n        var newKey = new Key(token, Key.numberOfKeys);\r\n        MapWrapper.set(this._allKeys, token, newKey);\r\n        return newKey;\r\n    }\r\n    get numberOfKeys() { return MapWrapper.size(this._allKeys); }\r\n}\r\nvar _globalKeyRegistry = new KeyRegistry();\r\n//# sourceMappingURL=key.js.map"]}