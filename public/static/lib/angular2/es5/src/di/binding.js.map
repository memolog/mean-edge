{"version":3,"sources":["binding.js"],"names":[],"mappings":"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","file":"src/di/binding.js","sourceRoot":"/Users/yamaguchi/Desktop/mean-edge/node_modules/angular2/es6/dev/","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") return Reflect.decorate(decorators, target, key, desc);\r\n    switch (arguments.length) {\r\n        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);\r\n        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);\r\n        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);\r\n    }\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Type, isBlank, isPresent, CONST } from 'angular2/src/facade/lang';\r\nimport { ListWrapper } from 'angular2/src/facade/collection';\r\nimport { reflector } from 'angular2/src/reflection/reflection';\r\nimport { Key } from './key';\r\nimport { Inject, InjectLazy, InjectPromise, Optional, DependencyAnnotation } from './annotations_impl';\r\nimport { NoAnnotationError } from './exceptions';\r\n/**\r\n * @private\r\n */\r\nexport class Dependency {\r\n    constructor(key, asPromise, lazy, optional, properties) {\r\n        this.key = key;\r\n        this.asPromise = asPromise;\r\n        this.lazy = lazy;\r\n        this.optional = optional;\r\n        this.properties = properties;\r\n    }\r\n    static fromKey(key) { return new Dependency(key, false, false, false, []); }\r\n}\r\nvar _EMPTY_LIST = []; // TODO: make const when supported\r\n/**\r\n * Describes how the {@link Injector} should instantiate a given token.\r\n *\r\n * See {@link bind}.\r\n *\r\n * ## Example\r\n *\r\n * ```javascript\r\n * var injector = Injector.resolveAndCreate([\r\n *   new Binding(String, { toValue: 'Hello' })\r\n * ]);\r\n *\r\n * expect(injector.get(String)).toEqual('Hello');\r\n * ```\r\n *\r\n * @exportedAs angular2/di\r\n */\r\nexport let Binding = class {\r\n    constructor(token, { toClass, toValue, toAlias, toFactory, toAsyncFactory, deps }) {\r\n        this.token = token;\r\n        this.toClass = toClass;\r\n        this.toValue = toValue;\r\n        this.toAlias = toAlias;\r\n        this.toFactory = toFactory;\r\n        this.toAsyncFactory = toAsyncFactory;\r\n        this.dependencies = deps;\r\n    }\r\n    /**\r\n     * Converts the {@link Binding} into {@link ResolvedBinding}.\r\n     *\r\n     * {@link Injector} internally only uses {@link ResolvedBinding}, {@link Binding} contains\r\n     * convenience binding syntax.\r\n     */\r\n    resolve() {\r\n        var factoryFn;\r\n        var resolvedDeps;\r\n        var isAsync = false;\r\n        if (isPresent(this.toClass)) {\r\n            factoryFn = reflector.factory(this.toClass);\r\n            resolvedDeps = _dependenciesFor(this.toClass);\r\n        }\r\n        else if (isPresent(this.toAlias)) {\r\n            factoryFn = (aliasInstance) => aliasInstance;\r\n            resolvedDeps = [Dependency.fromKey(Key.get(this.toAlias))];\r\n        }\r\n        else if (isPresent(this.toFactory)) {\r\n            factoryFn = this.toFactory;\r\n            resolvedDeps = _constructDependencies(this.toFactory, this.dependencies);\r\n        }\r\n        else if (isPresent(this.toAsyncFactory)) {\r\n            factoryFn = this.toAsyncFactory;\r\n            resolvedDeps = _constructDependencies(this.toAsyncFactory, this.dependencies);\r\n            isAsync = true;\r\n        }\r\n        else {\r\n            factoryFn = () => this.toValue;\r\n            resolvedDeps = _EMPTY_LIST;\r\n        }\r\n        return new ResolvedBinding(Key.get(this.token), factoryFn, resolvedDeps, isAsync);\r\n    }\r\n};\r\nBinding = __decorate([\r\n    CONST(), \r\n    __metadata('design:paramtypes', [Object, Object])\r\n], Binding);\r\n/**\r\n * An internal resolved representation of a {@link Binding} used by the {@link Injector}.\r\n *\r\n * A {@link Binding} is resolved when it has a factory function. Binding to a class, alias, or\r\n * value, are just convenience methods, as {@link Injector} only operates on calling factory\r\n * functions.\r\n *\r\n * @exportedAs angular2/di\r\n */\r\nexport class ResolvedBinding {\r\n    constructor(\r\n        /**\r\n         * A key, usually a `Type`.\r\n         */\r\n        key, \r\n        /**\r\n         * Factory function which can return an instance of an object represented by a key.\r\n         */\r\n        factory, \r\n        /**\r\n         * Arguments (dependencies) to the `factory` function.\r\n         */\r\n        dependencies, \r\n        /**\r\n         * Specifies whether the `factory` function returns a `Promise`.\r\n         */\r\n        providedAsPromise) {\r\n        this.key = key;\r\n        this.factory = factory;\r\n        this.dependencies = dependencies;\r\n        this.providedAsPromise = providedAsPromise;\r\n    }\r\n}\r\n/**\r\n * Provides an API for imperatively constructing {@link Binding}s.\r\n *\r\n * This is only relevant for JavaScript. See {@link BindingBuilder}.\r\n *\r\n * ## Example\r\n *\r\n * ```javascript\r\n * bind(MyInterface).toClass(MyClass)\r\n *\r\n * ```\r\n *\r\n * @exportedAs angular2/di\r\n */\r\nexport function bind(token) {\r\n    return new BindingBuilder(token);\r\n}\r\n/**\r\n * Helper class for the {@link bind} function.\r\n *\r\n * @exportedAs angular2/di\r\n */\r\nexport class BindingBuilder {\r\n    constructor(token) {\r\n        this.token = token;\r\n    }\r\n    /**\r\n     * Binds an interface to an implementation / subclass.\r\n     *\r\n     * ## Example\r\n     *\r\n     * Because `toAlias` and `toClass` are often confused, the example contains both use cases for\r\n     * easy comparison.\r\n     *\r\n     * ```javascript\r\n     *\r\n     * class Vehicle {}\r\n     *\r\n     * class Car extends Vehicle {}\r\n     *\r\n     * var injectorClass = Injector.resolveAndCreate([\r\n     *   Car,\r\n     *   bind(Vehicle).toClass(Car)\r\n     * ]);\r\n     * var injectorAlias = Injector.resolveAndCreate([\r\n     *   Car,\r\n     *   bind(Vehicle).toAlias(Car)\r\n     * ]);\r\n     *\r\n     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));\r\n     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);\r\n     *\r\n     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));\r\n     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);\r\n     * ```\r\n     */\r\n    toClass(type) { return new Binding(this.token, { toClass: type }); }\r\n    /**\r\n     * Binds a key to a value.\r\n     *\r\n     * ## Example\r\n     *\r\n     * ```javascript\r\n     * var injector = Injector.resolveAndCreate([\r\n     *   bind(String).toValue('Hello')\r\n     * ]);\r\n     *\r\n     * expect(injector.get(String)).toEqual('Hello');\r\n     * ```\r\n     */\r\n    toValue(value) { return new Binding(this.token, { toValue: value }); }\r\n    /**\r\n     * Binds a key to the alias for an existing key.\r\n     *\r\n     * An alias means that we will return the same instance as if the alias token was used. (This is\r\n     * in contrast to `toClass` where a separet instance of `toClass` will be returned.)\r\n     *\r\n     * ## Example\r\n     *\r\n     * Becuse `toAlias` and `toClass` are often confused, the example contains both use cases for easy\r\n     * comparison.\r\n     *\r\n     * ```javascript\r\n     *\r\n     * class Vehicle {}\r\n     *\r\n     * class Car extends Vehicle {}\r\n     *\r\n     * var injectorAlias = Injector.resolveAndCreate([\r\n     *   Car,\r\n     *   bind(Vehicle).toAlias(Car)\r\n     * ]);\r\n     * var injectorClass = Injector.resolveAndCreate([\r\n     *   Car,\r\n     *   bind(Vehicle).toClass(Car)\r\n     * ]);\r\n     *\r\n     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));\r\n     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);\r\n     *\r\n     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));\r\n     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);\r\n     * ```\r\n     */\r\n    toAlias(aliasToken) { return new Binding(this.token, { toAlias: aliasToken }); }\r\n    /**\r\n     * Binds a key to a function which computes the value.\r\n     *\r\n     * ## Example\r\n     *\r\n     * ```javascript\r\n     * var injector = Injector.resolveAndCreate([\r\n     *   bind(Number).toFactory(() => { return 1+2; }}),\r\n     *   bind(String).toFactory((v) => { return \"Value: \" + v; }, [Number] })\r\n     * ]);\r\n     *\r\n     * expect(injector.get(Number)).toEqual(3);\r\n     * expect(injector.get(String)).toEqual('Value: 3');\r\n     * ```\r\n     */\r\n    toFactory(factoryFunction, dependencies) {\r\n        return new Binding(this.token, { toFactory: factoryFunction, deps: dependencies });\r\n    }\r\n    /**\r\n     * Binds a key to a function which computes the value asynchronously.\r\n     *\r\n     * ## Example\r\n     *\r\n     * ```javascript\r\n     * var injector = Injector.resolveAndCreate([\r\n     *   bind(Number).toAsyncFactory(() => {\r\n     *     return new Promise((resolve) => resolve(1 + 2));\r\n     *   }),\r\n     *   bind(String).toFactory((v) => { return \"Value: \" + v; }, [Number])\r\n     * ]);\r\n     *\r\n     * injector.asyncGet(Number).then((v) => expect(v).toBe(3));\r\n     * injector.asyncGet(String).then((v) => expect(v).toBe('Value: 3'));\r\n     * ```\r\n     *\r\n     * The interesting thing to note is that event though `Number` has an async factory, the `String`\r\n     * factory function takes the resolved value. This shows that the {@link Injector} delays\r\n     * executing of the `String` factory\r\n     * until after the `Number` is resolved. This can only be done if the `token` is retrieved using\r\n     * the `asyncGet` API in the {@link Injector}.\r\n     */\r\n    toAsyncFactory(factoryFunction, dependencies) {\r\n        return new Binding(this.token, { toAsyncFactory: factoryFunction, deps: dependencies });\r\n    }\r\n}\r\nfunction _constructDependencies(factoryFunction, dependencies) {\r\n    return isBlank(dependencies) ?\r\n        _dependenciesFor(factoryFunction) :\r\n        ListWrapper.map(dependencies, (t) => Dependency.fromKey(Key.get(t)));\r\n}\r\nfunction _dependenciesFor(typeOrFunc) {\r\n    var params = reflector.parameters(typeOrFunc);\r\n    if (isBlank(params))\r\n        return [];\r\n    if (ListWrapper.any(params, (p) => isBlank(p))) {\r\n        throw new NoAnnotationError(typeOrFunc);\r\n    }\r\n    return ListWrapper.map(params, (p) => _extractToken(typeOrFunc, p));\r\n}\r\nfunction _extractToken(typeOrFunc, annotations) {\r\n    var depProps = [];\r\n    var token = null;\r\n    var optional = false;\r\n    var lazy = false;\r\n    var asPromise = false;\r\n    for (var i = 0; i < annotations.length; ++i) {\r\n        var paramAnnotation = annotations[i];\r\n        if (paramAnnotation instanceof Type) {\r\n            token = paramAnnotation;\r\n        }\r\n        else if (paramAnnotation instanceof Inject) {\r\n            token = paramAnnotation.token;\r\n        }\r\n        else if (paramAnnotation instanceof InjectPromise) {\r\n            token = paramAnnotation.token;\r\n            asPromise = true;\r\n        }\r\n        else if (paramAnnotation instanceof InjectLazy) {\r\n            token = paramAnnotation.token;\r\n            lazy = true;\r\n        }\r\n        else if (paramAnnotation instanceof Optional) {\r\n            optional = true;\r\n        }\r\n        else if (paramAnnotation instanceof DependencyAnnotation) {\r\n            if (isPresent(paramAnnotation.token)) {\r\n                token = paramAnnotation.token;\r\n            }\r\n            ListWrapper.push(depProps, paramAnnotation);\r\n        }\r\n    }\r\n    if (isPresent(token)) {\r\n        return _createDependency(token, asPromise, lazy, optional, depProps);\r\n    }\r\n    else {\r\n        throw new NoAnnotationError(typeOrFunc);\r\n    }\r\n}\r\nfunction _createDependency(token, asPromise, lazy, optional, depProps) {\r\n    return new Dependency(Key.get(token), asPromise, lazy, optional, depProps);\r\n}\r\n//# sourceMappingURL=binding.js.map"]}