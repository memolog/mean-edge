{"version":3,"sources":["coalesce.js"],"names":[],"mappings":"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","file":"src/change_detection/coalesce.js","sourceRoot":"/Users/yamaguchi/Desktop/mean-edge/node_modules/angular2/es6/dev/","sourcesContent":["import { isPresent } from 'angular2/src/facade/lang';\r\nimport { ListWrapper, MapWrapper } from 'angular2/src/facade/collection';\r\nimport { RECORD_TYPE_SELF, ProtoRecord } from './proto_record';\r\n// HACK: workaround for Traceur behavior.\r\n// It expects all transpiled modules to contain this marker.\r\n// TODO: remove this when we no longer use traceur\r\nexport var __esModule = true;\r\n/**\r\n * Removes \"duplicate\" records. It assuming that record evaluation does not\r\n * have side-effects.\r\n *\r\n * Records that are not last in bindings are removed and all the indices\r\n * of the records that depend on them are updated.\r\n *\r\n * Records that are last in bindings CANNOT be removed, and instead are\r\n * replaced with very cheap SELF records.\r\n */\r\nexport function coalesce(records) {\r\n    var res = ListWrapper.create();\r\n    var indexMap = MapWrapper.create();\r\n    for (var i = 0; i < records.length; ++i) {\r\n        var r = records[i];\r\n        var record = _replaceIndices(r, res.length + 1, indexMap);\r\n        var matchingRecord = _findMatching(record, res);\r\n        if (isPresent(matchingRecord) && record.lastInBinding) {\r\n            ListWrapper.push(res, _selfRecord(record, matchingRecord.selfIndex, res.length + 1));\r\n            MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);\r\n        }\r\n        else if (isPresent(matchingRecord) && !record.lastInBinding) {\r\n            MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);\r\n        }\r\n        else {\r\n            ListWrapper.push(res, record);\r\n            MapWrapper.set(indexMap, r.selfIndex, record.selfIndex);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction _selfRecord(r, contextIndex, selfIndex) {\r\n    return new ProtoRecord(RECORD_TYPE_SELF, \"self\", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);\r\n}\r\nfunction _findMatching(r, rs) {\r\n    return ListWrapper.find(rs, (rr) => rr.mode === r.mode && rr.funcOrValue === r.funcOrValue &&\r\n        rr.contextIndex === r.contextIndex &&\r\n        ListWrapper.equals(rr.args, r.args));\r\n}\r\nfunction _replaceIndices(r, selfIndex, indexMap) {\r\n    var args = ListWrapper.map(r.args, (a) => _map(indexMap, a));\r\n    var contextIndex = _map(indexMap, r.contextIndex);\r\n    return new ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);\r\n}\r\nfunction _map(indexMap, value) {\r\n    var r = MapWrapper.get(indexMap, value);\r\n    return isPresent(r) ? r : value;\r\n}\r\n//# sourceMappingURL=coalesce.js.map"]}