{"version":3,"sources":["iterable_changes.js"],"names":[],"mappings":"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","file":"src/change_detection/pipes/iterable_changes.js","sourceRoot":"/Users/yamaguchi/Desktop/mean-edge/node_modules/angular2/es6/dev/","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") return Reflect.decorate(decorators, target, key, desc);\r\n    switch (arguments.length) {\r\n        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);\r\n        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);\r\n        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);\r\n    }\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { CONST } from 'angular2/src/facade/lang';\r\nimport { isListLikeIterable, iterateListLike, ListWrapper, MapWrapper } from 'angular2/src/facade/collection';\r\nimport { isBlank, isPresent, stringify, getMapKey, looseIdentical } from 'angular2/src/facade/lang';\r\nimport { WrappedValue, Pipe, PipeFactory } from './pipe';\r\n// HACK: workaround for Traceur behavior.\r\n// It expects all transpiled modules to contain this marker.\r\n// TODO: remove this when we no longer use traceur\r\nexport var __esModule = true;\r\nexport let IterableChangesFactory = class extends PipeFactory {\r\n    constructor() {\r\n        super();\r\n    }\r\n    supports(obj) { return IterableChanges.supportsObj(obj); }\r\n    create(cdRef) { return new IterableChanges(); }\r\n};\r\nIterableChangesFactory = __decorate([\r\n    CONST(), \r\n    __metadata('design:paramtypes', [])\r\n], IterableChangesFactory);\r\n/**\r\n * @exportedAs angular2/pipes\r\n */\r\nexport class IterableChanges extends Pipe {\r\n    constructor() {\r\n        super();\r\n        this._collection = null;\r\n        this._length = null;\r\n        /// Keeps track of the used records at any point in time (during & across `_check()` calls)\r\n        this._linkedRecords = null;\r\n        /// Keeps track of the removed records at any point in time during `_check()` calls.\r\n        this._unlinkedRecords = null;\r\n        this._previousItHead = null;\r\n        this._itHead = null;\r\n        this._itTail = null;\r\n        this._additionsHead = null;\r\n        this._additionsTail = null;\r\n        this._movesHead = null;\r\n        this._movesTail = null;\r\n        this._removalsHead = null;\r\n        this._removalsTail = null;\r\n    }\r\n    static supportsObj(obj) { return isListLikeIterable(obj); }\r\n    supports(obj) { return IterableChanges.supportsObj(obj); }\r\n    get collection() { return this._collection; }\r\n    get length() { return this._length; }\r\n    forEachItem(fn) {\r\n        var record;\r\n        for (record = this._itHead; record !== null; record = record._next) {\r\n            fn(record);\r\n        }\r\n    }\r\n    forEachPreviousItem(fn) {\r\n        var record;\r\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\r\n            fn(record);\r\n        }\r\n    }\r\n    forEachAddedItem(fn) {\r\n        var record;\r\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n            fn(record);\r\n        }\r\n    }\r\n    forEachMovedItem(fn) {\r\n        var record;\r\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\r\n            fn(record);\r\n        }\r\n    }\r\n    forEachRemovedItem(fn) {\r\n        var record;\r\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\r\n            fn(record);\r\n        }\r\n    }\r\n    transform(collection) {\r\n        if (this.check(collection)) {\r\n            return WrappedValue.wrap(this);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n    // todo(vicb): optim for UnmodifiableListView (frozen arrays)\r\n    check(collection) {\r\n        this._reset();\r\n        var record = this._itHead;\r\n        var mayBeDirty = false;\r\n        var index;\r\n        var item;\r\n        if (ListWrapper.isList(collection)) {\r\n            var list = collection;\r\n            this._length = collection.length;\r\n            for (index = 0; index < this._length; index++) {\r\n                item = list[index];\r\n                if (record === null || !looseIdentical(record.item, item)) {\r\n                    record = this._mismatch(record, item, index);\r\n                    mayBeDirty = true;\r\n                }\r\n                else if (mayBeDirty) {\r\n                    // TODO(misko): can we limit this to duplicates only?\r\n                    record = this._verifyReinsertion(record, item, index);\r\n                }\r\n                record = record._next;\r\n            }\r\n        }\r\n        else {\r\n            index = 0;\r\n            iterateListLike(collection, (item) => {\r\n                if (record === null || !looseIdentical(record.item, item)) {\r\n                    record = this._mismatch(record, item, index);\r\n                    mayBeDirty = true;\r\n                }\r\n                else if (mayBeDirty) {\r\n                    // TODO(misko): can we limit this to duplicates only?\r\n                    record = this._verifyReinsertion(record, item, index);\r\n                }\r\n                record = record._next;\r\n                index++;\r\n            });\r\n            this._length = index;\r\n        }\r\n        this._truncate(record);\r\n        this._collection = collection;\r\n        return this.isDirty;\r\n    }\r\n    // CollectionChanges is considered dirty if it has any additions, moves or removals.\r\n    get isDirty() {\r\n        return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null;\r\n    }\r\n    /**\r\n     * Reset the state of the change objects to show no changes. This means set previousKey to\r\n     * currentKey, and clear all of the queues (additions, moves, removals).\r\n     * Set the previousIndexes of moved and added items to their currentIndexes\r\n     * Reset the list of additions, moves and removals\r\n     */\r\n    _reset() {\r\n        if (this.isDirty) {\r\n            var record;\r\n            var nextRecord;\r\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\r\n                record._nextPrevious = record._next;\r\n            }\r\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n                record.previousIndex = record.currentIndex;\r\n            }\r\n            this._additionsHead = this._additionsTail = null;\r\n            for (record = this._movesHead; record !== null; record = nextRecord) {\r\n                record.previousIndex = record.currentIndex;\r\n                nextRecord = record._nextMoved;\r\n            }\r\n            this._movesHead = this._movesTail = null;\r\n            this._removalsHead = this._removalsTail = null;\r\n        }\r\n    }\r\n    /**\r\n     * This is the core function which handles differences between collections.\r\n     *\r\n     * - `record` is the record which we saw at this position last time. If null then it is a new\r\n     *   item.\r\n     * - `item` is the current item in the collection\r\n     * - `index` is the position of the item in the collection\r\n     */\r\n    _mismatch(record, item, index) {\r\n        // The previous record after which we will append the current one.\r\n        var previousRecord;\r\n        if (record === null) {\r\n            previousRecord = this._itTail;\r\n        }\r\n        else {\r\n            previousRecord = record._prev;\r\n            // Remove the record from the collection since we know it does not match the item.\r\n            this._remove(record);\r\n        }\r\n        // Attempt to see if we have seen the item before.\r\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);\r\n        if (record !== null) {\r\n            // We have seen this before, we need to move it forward in the collection.\r\n            this._moveAfter(record, previousRecord, index);\r\n        }\r\n        else {\r\n            // Never seen it, check evicted list.\r\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);\r\n            if (record !== null) {\r\n                // It is an item which we have evicted earlier: reinsert it back into the list.\r\n                this._reinsertAfter(record, previousRecord, index);\r\n            }\r\n            else {\r\n                // It is a new item: add it.\r\n                record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);\r\n            }\r\n        }\r\n        return record;\r\n    }\r\n    /**\r\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\r\n     *\r\n     * Use case: `[a, a]` => `[b, a, a]`\r\n     *\r\n     * If we did not have this check then the insertion of `b` would:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\r\n     *   3) reinsert `a` at index 2. <-- this is wrong!\r\n     *\r\n     * The correct behavior is:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) reinsert `a` at index 1.\r\n     *   3) move `a` at from `1` to `2`.\r\n     *\r\n     *\r\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\r\n     * have already been removed:\r\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\r\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\r\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\r\n     * at the end.\r\n     */\r\n    _verifyReinsertion(record, item, index) {\r\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);\r\n        if (reinsertRecord !== null) {\r\n            record = this._reinsertAfter(reinsertRecord, record._prev, index);\r\n        }\r\n        else if (record.currentIndex != index) {\r\n            record.currentIndex = index;\r\n            this._addToMoves(record, index);\r\n        }\r\n        return record;\r\n    }\r\n    /**\r\n     * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection\r\n     *\r\n     * - `record` The first excess {@link CollectionChangeRecord}.\r\n     */\r\n    _truncate(record) {\r\n        // Anything after that needs to be removed;\r\n        while (record !== null) {\r\n            var nextRecord = record._next;\r\n            this._addToRemovals(this._unlink(record));\r\n            record = nextRecord;\r\n        }\r\n        if (this._unlinkedRecords !== null) {\r\n            this._unlinkedRecords.clear();\r\n        }\r\n        if (this._additionsTail !== null) {\r\n            this._additionsTail._nextAdded = null;\r\n        }\r\n        if (this._movesTail !== null) {\r\n            this._movesTail._nextMoved = null;\r\n        }\r\n        if (this._itTail !== null) {\r\n            this._itTail._next = null;\r\n        }\r\n        if (this._removalsTail !== null) {\r\n            this._removalsTail._nextRemoved = null;\r\n        }\r\n    }\r\n    _reinsertAfter(record, prevRecord, index) {\r\n        if (this._unlinkedRecords !== null) {\r\n            this._unlinkedRecords.remove(record);\r\n        }\r\n        var prev = record._prevRemoved;\r\n        var next = record._nextRemoved;\r\n        if (prev === null) {\r\n            this._removalsHead = next;\r\n        }\r\n        else {\r\n            prev._nextRemoved = next;\r\n        }\r\n        if (next === null) {\r\n            this._removalsTail = prev;\r\n        }\r\n        else {\r\n            next._prevRemoved = prev;\r\n        }\r\n        this._insertAfter(record, prevRecord, index);\r\n        this._addToMoves(record, index);\r\n        return record;\r\n    }\r\n    _moveAfter(record, prevRecord, index) {\r\n        this._unlink(record);\r\n        this._insertAfter(record, prevRecord, index);\r\n        this._addToMoves(record, index);\r\n        return record;\r\n    }\r\n    _addAfter(record, prevRecord, index) {\r\n        this._insertAfter(record, prevRecord, index);\r\n        if (this._additionsTail === null) {\r\n            // todo(vicb)\r\n            // assert(this._additionsHead === null);\r\n            this._additionsTail = this._additionsHead = record;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(_additionsTail._nextAdded === null);\r\n            // assert(record._nextAdded === null);\r\n            this._additionsTail = this._additionsTail._nextAdded = record;\r\n        }\r\n        return record;\r\n    }\r\n    _insertAfter(record, prevRecord, index) {\r\n        // todo(vicb)\r\n        // assert(record != prevRecord);\r\n        // assert(record._next === null);\r\n        // assert(record._prev === null);\r\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\r\n        // todo(vicb)\r\n        // assert(next != record);\r\n        // assert(prevRecord != record);\r\n        record._next = next;\r\n        record._prev = prevRecord;\r\n        if (next === null) {\r\n            this._itTail = record;\r\n        }\r\n        else {\r\n            next._prev = record;\r\n        }\r\n        if (prevRecord === null) {\r\n            this._itHead = record;\r\n        }\r\n        else {\r\n            prevRecord._next = record;\r\n        }\r\n        if (this._linkedRecords === null) {\r\n            this._linkedRecords = new _DuplicateMap();\r\n        }\r\n        this._linkedRecords.put(record);\r\n        record.currentIndex = index;\r\n        return record;\r\n    }\r\n    _remove(record) {\r\n        return this._addToRemovals(this._unlink(record));\r\n    }\r\n    _unlink(record) {\r\n        if (this._linkedRecords !== null) {\r\n            this._linkedRecords.remove(record);\r\n        }\r\n        var prev = record._prev;\r\n        var next = record._next;\r\n        // todo(vicb)\r\n        // assert((record._prev = null) === null);\r\n        // assert((record._next = null) === null);\r\n        if (prev === null) {\r\n            this._itHead = next;\r\n        }\r\n        else {\r\n            prev._next = next;\r\n        }\r\n        if (next === null) {\r\n            this._itTail = prev;\r\n        }\r\n        else {\r\n            next._prev = prev;\r\n        }\r\n        return record;\r\n    }\r\n    _addToMoves(record, toIndex) {\r\n        // todo(vicb)\r\n        // assert(record._nextMoved === null);\r\n        if (record.previousIndex === toIndex) {\r\n            return record;\r\n        }\r\n        if (this._movesTail === null) {\r\n            // todo(vicb)\r\n            // assert(_movesHead === null);\r\n            this._movesTail = this._movesHead = record;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(_movesTail._nextMoved === null);\r\n            this._movesTail = this._movesTail._nextMoved = record;\r\n        }\r\n        return record;\r\n    }\r\n    _addToRemovals(record) {\r\n        if (this._unlinkedRecords === null) {\r\n            this._unlinkedRecords = new _DuplicateMap();\r\n        }\r\n        this._unlinkedRecords.put(record);\r\n        record.currentIndex = null;\r\n        record._nextRemoved = null;\r\n        if (this._removalsTail === null) {\r\n            // todo(vicb)\r\n            // assert(_removalsHead === null);\r\n            this._removalsTail = this._removalsHead = record;\r\n            record._prevRemoved = null;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(_removalsTail._nextRemoved === null);\r\n            // assert(record._nextRemoved === null);\r\n            record._prevRemoved = this._removalsTail;\r\n            this._removalsTail = this._removalsTail._nextRemoved = record;\r\n        }\r\n        return record;\r\n    }\r\n    toString() {\r\n        var record;\r\n        var list = [];\r\n        for (record = this._itHead; record !== null; record = record._next) {\r\n            ListWrapper.push(list, record);\r\n        }\r\n        var previous = [];\r\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\r\n            ListWrapper.push(previous, record);\r\n        }\r\n        var additions = [];\r\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n            ListWrapper.push(additions, record);\r\n        }\r\n        var moves = [];\r\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\r\n            ListWrapper.push(moves, record);\r\n        }\r\n        var removals = [];\r\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\r\n            ListWrapper.push(removals, record);\r\n        }\r\n        return \"collection: \" + list.join(', ') + \"\\n\" + \"previous: \" + previous.join(', ') + \"\\n\" +\r\n            \"additions: \" + additions.join(', ') + \"\\n\" + \"moves: \" + moves.join(', ') + \"\\n\" +\r\n            \"removals: \" + removals.join(', ') + \"\\n\";\r\n    }\r\n}\r\n/**\r\n * @exportedAs angular2/pipes\r\n */\r\nexport class CollectionChangeRecord {\r\n    constructor(item) {\r\n        this.currentIndex = null;\r\n        this.previousIndex = null;\r\n        this.item = item;\r\n        this._nextPrevious = null;\r\n        this._prev = null;\r\n        this._next = null;\r\n        this._prevDup = null;\r\n        this._nextDup = null;\r\n        this._prevRemoved = null;\r\n        this._nextRemoved = null;\r\n        this._nextAdded = null;\r\n        this._nextMoved = null;\r\n    }\r\n    toString() {\r\n        return this.previousIndex === this.currentIndex ?\r\n            stringify(this.item) :\r\n            stringify(this.item) + '[' + stringify(this.previousIndex) + '->' +\r\n                stringify(this.currentIndex) + ']';\r\n    }\r\n}\r\n// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item\r\nclass _DuplicateItemRecordList {\r\n    constructor() {\r\n        this._head = null;\r\n        this._tail = null;\r\n    }\r\n    /**\r\n     * Append the record to the list of duplicates.\r\n     *\r\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\r\n     */\r\n    add(record) {\r\n        if (this._head === null) {\r\n            this._head = this._tail = record;\r\n            record._nextDup = null;\r\n            record._prevDup = null;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(record.item ==  _head.item ||\r\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\r\n            this._tail._nextDup = record;\r\n            record._prevDup = this._tail;\r\n            record._nextDup = null;\r\n            this._tail = record;\r\n        }\r\n    }\r\n    // Returns a CollectionChangeRecord having CollectionChangeRecord.item == item and\r\n    // CollectionChangeRecord.currentIndex >= afterIndex\r\n    get(item, afterIndex) {\r\n        var record;\r\n        for (record = this._head; record !== null; record = record._nextDup) {\r\n            if ((afterIndex === null || afterIndex < record.currentIndex) &&\r\n                looseIdentical(record.item, item)) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Remove one {@link CollectionChangeRecord} from the list of duplicates.\r\n     *\r\n     * Returns whether the list of duplicates is empty.\r\n     */\r\n    remove(record) {\r\n        // todo(vicb)\r\n        // assert(() {\r\n        //  // verify that the record being removed is in the list.\r\n        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {\r\n        //    if (identical(cursor, record)) return true;\r\n        //  }\r\n        //  return false;\r\n        //});\r\n        var prev = record._prevDup;\r\n        var next = record._nextDup;\r\n        if (prev === null) {\r\n            this._head = next;\r\n        }\r\n        else {\r\n            prev._nextDup = next;\r\n        }\r\n        if (next === null) {\r\n            this._tail = prev;\r\n        }\r\n        else {\r\n            next._prevDup = prev;\r\n        }\r\n        return this._head === null;\r\n    }\r\n}\r\nclass _DuplicateMap {\r\n    constructor() {\r\n        this.map = MapWrapper.create();\r\n    }\r\n    put(record) {\r\n        // todo(vicb) handle corner cases\r\n        var key = getMapKey(record.item);\r\n        var duplicates = MapWrapper.get(this.map, key);\r\n        if (!isPresent(duplicates)) {\r\n            duplicates = new _DuplicateItemRecordList();\r\n            MapWrapper.set(this.map, key, duplicates);\r\n        }\r\n        duplicates.add(record);\r\n    }\r\n    /**\r\n     * Retrieve the `value` using key. Because the CollectionChangeRecord value maybe one which we\r\n     * have already iterated over, we use the afterIndex to pretend it is not there.\r\n     *\r\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\r\n     * have any more `a`s needs to return the last `a` not the first or second.\r\n     */\r\n    get(value, afterIndex = null) {\r\n        var key = getMapKey(value);\r\n        var recordList = MapWrapper.get(this.map, key);\r\n        return isBlank(recordList) ? null : recordList.get(value, afterIndex);\r\n    }\r\n    /**\r\n     * Removes a {@link CollectionChangeRecord} from the list of duplicates.\r\n     *\r\n     * The list of duplicates also is removed from the map if it gets empty.\r\n     */\r\n    remove(record) {\r\n        var key = getMapKey(record.item);\r\n        // todo(vicb)\r\n        // assert(this.map.containsKey(key));\r\n        var recordList = MapWrapper.get(this.map, key);\r\n        // Remove the list of duplicates when it gets empty\r\n        if (recordList.remove(record)) {\r\n            MapWrapper.delete(this.map, key);\r\n        }\r\n        return record;\r\n    }\r\n    get isEmpty() { return MapWrapper.size(this.map) === 0; }\r\n    clear() { MapWrapper.clear(this.map); }\r\n    toString() { return '_DuplicateMap(' + stringify(this.map) + ')'; }\r\n}\r\n//# sourceMappingURL=iterable_changes.js.map"]}