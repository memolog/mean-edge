{"version":3,"sources":["promise_pipe.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,qEAAoB,UAAS,SAAQ;;;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,qBAAoB,KAAG,eAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,cAAoB,KAAG,QAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,mBAAoB,KAAG,aAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;iBAIY,KAAG;AAN3B,cAAQ,AAAC,0BAAqC,CAAA;AAA9C,oBAAA,SAAS,QAAO;AAgCT,eAAM,YAAU,CACP,GAAE,CAAG;AAjCrB,AAkCQ,wBAlCM,iBAAiB,AAAC,aAAkB,KAAK,MAAmB,CAkC3D;AACP,aAAG,KAAK,EAAI,IAAE,CAAC;AACf,aAAG,aAAa,EAAI,KAAG,CAAC;AACxB,aAAG,qBAAqB,EAAI,KAAG,CAAC;QACpC;AApCM,AAmEV,aAnEiB,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAqC1C,iBAAO,CAAP,UAAS,OAAM,CAAG;AAAE,iBAAO,CAAA,cAAa,UAAU,AAAC,CAAC,OAAM,CAAC,CAAC;UAAE;AAC9D,kBAAQ,CAAR,UAAS,AAAC,CAAE,GAEZ;AACA,kBAAQ,CAAR,UAAU,OAAM;;AACZ,eAAI,OAAM,AAAC,CAAC,IAAG,eAAe,CAAC,CAAG;AAC9B,iBAAG,eAAe,EAAI,QAAM,CAAC;AAC7B,oBAAM,KAAK,AAAC,EAAC,SAAC,GAAE,CAAM;AAClB,mBAAI,mBAAkB,IAAM,QAAM,CAAG;AACjC,wCAAsB,AAAC,CAAC,GAAE,CAAC,CAAC;gBAChC;AAAA,cACJ,EAAC,CAAC;AACF,mBAAO,KAAG,CAAC;YACf;AAAA,AACA,eAAI,OAAM,IAAM,CAAA,IAAG,eAAe,CAAG;AACjC,iBAAG,eAAe,EAAI,KAAG,CAAC;AAC1B,mBAAO,CAAA,IAAG,UAAU,AAAC,CAAC,OAAM,CAAC,CAAC;YAClC;AAAA,AACA,eAAI,IAAG,aAAa,IAAM,CAAA,IAAG,qBAAqB,CAAG;AACjD,mBAAO,CAAA,IAAG,qBAAqB,CAAC;YACpC,KACK;AACD,iBAAG,qBAAqB,EAAI,CAAA,IAAG,aAAa,CAAC;AAC7C,mBAAO,CAAA,YAAW,KAAK,AAAC,CAAC,IAAG,aAAa,CAAC,CAAC;YAC/C;AAAA,UACJ;AACA,2BAAiB,CAAjB,UAAmB,KAAI,CAAG;AACtB,eAAG,aAAa,EAAI,MAAI,CAAC;AACzB,eAAG,KAAK,aAAa,AAAC,EAAC,CAAC;UAC5B;AAAA,aAjE8D,SAAO,CAAC,CAAC;MACnE,AAAC,CA4BwB,IAAG,CA5BT,CAJS,CAAA;AAApC,cAAQ,AAAC,4BAAqC,CAAA;AAA9C,2BAAA,SAAQ,AAAC;AA2EF,eAAM,mBAAiB,KAG9B;AA5EU,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AA0E1C,iBAAO,CAAP,UAAS,OAAM,CAAG;AAAE,iBAAO,CAAA,cAAa,UAAU,AAAC,CAAC,OAAM,CAAC,CAAC;UAAE;AAC9D,eAAK,CAAL,UAAO,KAAI,CAAG;AAAE,iBAAO,IAAI,YAAU,AAAC,CAAC,KAAI,CAAC,CAAC;UAAE;AAAA,aA1Ea,CAAC;MACzD,AAAC,EAAC,CAJ0B,CAAA;AAApC,cAAQ,AAAC,0CAAqC,CAAA;IAEf;EAC3B,CAAA;AADI,CAAC,CAAC;AA6E6B","file":"src/change_detection/pipes/promise_pipe.js","sourceRoot":"/Users/yamaguchi/Desktop/mean-edge/node_modules/angular2/es6/dev/","sourcesContent":["import { PromiseWrapper } from 'angular2/src/facade/async';\r\nimport { isBlank } from 'angular2/src/facade/lang';\r\nimport { Pipe, WrappedValue } from './pipe';\r\n// HACK: workaround for Traceur behavior.\r\n// It expects all transpiled modules to contain this marker.\r\n// TODO: remove this when we no longer use traceur\r\nexport var __esModule = true;\r\n/**\r\n * Implements async bindings to Promise.\r\n *\r\n * # Example\r\n *\r\n * In this example we bind the description promise to the DOM.\r\n * The async pipe will convert a promise to the value with which it is resolved. It will also\r\n * request a change detection check when the promise is resolved.\r\n *\r\n *  ```\r\n * @Component({\r\n *   selector: \"task-cmp\",\r\n *   changeDetection: ON_PUSH\r\n * })\r\n * @View({\r\n *  inline: \"Task Description {{description|promise}}\"\r\n * })\r\n * class Task {\r\n *  description:Promise<string>;\r\n * }\r\n *\r\n * ```\r\n *\r\n * @exportedAs angular2/pipes\r\n */\r\nexport class PromisePipe extends Pipe {\r\n    constructor(ref) {\r\n        super();\r\n        this._ref = ref;\r\n        this._latestValue = null;\r\n        this._latestReturnedValue = null;\r\n    }\r\n    supports(promise) { return PromiseWrapper.isPromise(promise); }\r\n    onDestroy() {\r\n        // NO-OP\r\n    }\r\n    transform(promise) {\r\n        if (isBlank(this._sourcePromise)) {\r\n            this._sourcePromise = promise;\r\n            promise.then((val) => {\r\n                if (this._sourcePromise === promise) {\r\n                    this._updateLatestValue(val);\r\n                }\r\n            });\r\n            return null;\r\n        }\r\n        if (promise !== this._sourcePromise) {\r\n            this._sourcePromise = null;\r\n            return this.transform(promise);\r\n        }\r\n        if (this._latestValue === this._latestReturnedValue) {\r\n            return this._latestReturnedValue;\r\n        }\r\n        else {\r\n            this._latestReturnedValue = this._latestValue;\r\n            return WrappedValue.wrap(this._latestValue);\r\n        }\r\n    }\r\n    _updateLatestValue(value) {\r\n        this._latestValue = value;\r\n        this._ref.requestCheck();\r\n    }\r\n}\r\n/**\r\n * Provides a factory for [PromisePipe].\r\n *\r\n * @exportedAs angular2/pipes\r\n */\r\nexport class PromisePipeFactory {\r\n    supports(promise) { return PromiseWrapper.isPromise(promise); }\r\n    create(cdRef) { return new PromisePipe(cdRef); }\r\n}\r\n//# sourceMappingURL=promise_pipe.js.map"]}