{"version":3,"sources":["lexer.js"],"names":[],"mappings":"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","file":"src/change_detection/parser/lexer.js","sourceRoot":"/Users/yamaguchi/Desktop/mean-edge/node_modules/angular2/es6/dev/","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") return Reflect.decorate(decorators, target, key, desc);\r\n    switch (arguments.length) {\r\n        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);\r\n        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);\r\n        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);\r\n    }\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from 'angular2/src/di/decorators';\r\nimport { ListWrapper, SetWrapper } from \"angular2/src/facade/collection\";\r\nimport { NumberWrapper, StringJoiner, StringWrapper, BaseException } from \"angular2/src/facade/lang\";\r\n// HACK: workaround for Traceur behavior.\r\n// It expects all transpiled modules to contain this marker.\r\n// TODO: remove this when we no longer use traceur\r\nexport var __esModule = true;\r\nexport const TOKEN_TYPE_CHARACTER = 1;\r\nexport const TOKEN_TYPE_IDENTIFIER = 2;\r\nexport const TOKEN_TYPE_KEYWORD = 3;\r\nexport const TOKEN_TYPE_STRING = 4;\r\nexport const TOKEN_TYPE_OPERATOR = 5;\r\nexport const TOKEN_TYPE_NUMBER = 6;\r\nexport let Lexer = class {\r\n    tokenize(text) {\r\n        var scanner = new _Scanner(text);\r\n        var tokens = [];\r\n        var token = scanner.scanToken();\r\n        while (token != null) {\r\n            ListWrapper.push(tokens, token);\r\n            token = scanner.scanToken();\r\n        }\r\n        return tokens;\r\n    }\r\n};\r\nLexer = __decorate([\r\n    Injectable(), \r\n    __metadata('design:paramtypes', [])\r\n], Lexer);\r\nexport class Token {\r\n    constructor(index, type, numValue, strValue) {\r\n        this.index = index;\r\n        this.type = type;\r\n        this.numValue = numValue;\r\n        this.strValue = strValue;\r\n    }\r\n    isCharacter(code) {\r\n        return (this.type == TOKEN_TYPE_CHARACTER && this.numValue == code);\r\n    }\r\n    isNumber() { return (this.type == TOKEN_TYPE_NUMBER); }\r\n    isString() { return (this.type == TOKEN_TYPE_STRING); }\r\n    isOperator(operater) {\r\n        return (this.type == TOKEN_TYPE_OPERATOR && this.strValue == operater);\r\n    }\r\n    isIdentifier() { return (this.type == TOKEN_TYPE_IDENTIFIER); }\r\n    isKeyword() { return (this.type == TOKEN_TYPE_KEYWORD); }\r\n    isKeywordVar() { return (this.type == TOKEN_TYPE_KEYWORD && this.strValue == \"var\"); }\r\n    isKeywordNull() { return (this.type == TOKEN_TYPE_KEYWORD && this.strValue == \"null\"); }\r\n    isKeywordUndefined() {\r\n        return (this.type == TOKEN_TYPE_KEYWORD && this.strValue == \"undefined\");\r\n    }\r\n    isKeywordTrue() { return (this.type == TOKEN_TYPE_KEYWORD && this.strValue == \"true\"); }\r\n    isKeywordFalse() {\r\n        return (this.type == TOKEN_TYPE_KEYWORD && this.strValue == \"false\");\r\n    }\r\n    toNumber() {\r\n        // -1 instead of NULL ok?\r\n        return (this.type == TOKEN_TYPE_NUMBER) ? this.numValue : -1;\r\n    }\r\n    toString() {\r\n        var t = this.type;\r\n        if (t >= TOKEN_TYPE_CHARACTER && t <= TOKEN_TYPE_STRING) {\r\n            return this.strValue;\r\n        }\r\n        else if (t == TOKEN_TYPE_NUMBER) {\r\n            return this.numValue.toString();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\nfunction newCharacterToken(index, code) {\r\n    return new Token(index, TOKEN_TYPE_CHARACTER, code, StringWrapper.fromCharCode(code));\r\n}\r\nfunction newIdentifierToken(index, text) {\r\n    return new Token(index, TOKEN_TYPE_IDENTIFIER, 0, text);\r\n}\r\nfunction newKeywordToken(index, text) {\r\n    return new Token(index, TOKEN_TYPE_KEYWORD, 0, text);\r\n}\r\nfunction newOperatorToken(index, text) {\r\n    return new Token(index, TOKEN_TYPE_OPERATOR, 0, text);\r\n}\r\nfunction newStringToken(index, text) {\r\n    return new Token(index, TOKEN_TYPE_STRING, 0, text);\r\n}\r\nfunction newNumberToken(index, n) {\r\n    return new Token(index, TOKEN_TYPE_NUMBER, n, \"\");\r\n}\r\nexport var EOF = new Token(-1, 0, 0, \"\");\r\nexport const $EOF = 0;\r\nexport const $TAB = 9;\r\nexport const $LF = 10;\r\nexport const $VTAB = 11;\r\nexport const $FF = 12;\r\nexport const $CR = 13;\r\nexport const $SPACE = 32;\r\nexport const $BANG = 33;\r\nexport const $DQ = 34;\r\nexport const $HASH = 35;\r\nexport const $$ = 36;\r\nexport const $PERCENT = 37;\r\nexport const $AMPERSAND = 38;\r\nexport const $SQ = 39;\r\nexport const $LPAREN = 40;\r\nexport const $RPAREN = 41;\r\nexport const $STAR = 42;\r\nexport const $PLUS = 43;\r\nexport const $COMMA = 44;\r\nexport const $MINUS = 45;\r\nexport const $PERIOD = 46;\r\nexport const $SLASH = 47;\r\nexport const $COLON = 58;\r\nexport const $SEMICOLON = 59;\r\nexport const $LT = 60;\r\nexport const $EQ = 61;\r\nexport const $GT = 62;\r\nexport const $QUESTION = 63;\r\nconst $0 = 48;\r\nconst $9 = 57;\r\nconst $A = 65, $E = 69, $Z = 90;\r\nexport const $LBRACKET = 91;\r\nexport const $BACKSLASH = 92;\r\nexport const $RBRACKET = 93;\r\nconst $CARET = 94;\r\nconst $_ = 95;\r\nconst $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;\r\nexport const $LBRACE = 123;\r\nexport const $BAR = 124;\r\nexport const $RBRACE = 125;\r\nconst $NBSP = 160;\r\nexport class ScannerError extends BaseException {\r\n    constructor(message) {\r\n        super();\r\n        this.message = message;\r\n    }\r\n    toString() { return this.message; }\r\n}\r\nclass _Scanner {\r\n    constructor(input) {\r\n        this.input = input;\r\n        this.length = input.length;\r\n        this.peek = 0;\r\n        this.index = -1;\r\n        this.advance();\r\n    }\r\n    advance() {\r\n        this.peek =\r\n            ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);\r\n    }\r\n    scanToken() {\r\n        var input = this.input, length = this.length, peek = this.peek, index = this.index;\r\n        // Skip whitespace.\r\n        while (peek <= $SPACE) {\r\n            if (++index >= length) {\r\n                peek = $EOF;\r\n                break;\r\n            }\r\n            else {\r\n                peek = StringWrapper.charCodeAt(input, index);\r\n            }\r\n        }\r\n        this.peek = peek;\r\n        this.index = index;\r\n        if (index >= length) {\r\n            return null;\r\n        }\r\n        // Handle identifiers and numbers.\r\n        if (isIdentifierStart(peek))\r\n            return this.scanIdentifier();\r\n        if (isDigit(peek))\r\n            return this.scanNumber(index);\r\n        var start = index;\r\n        switch (peek) {\r\n            case $PERIOD:\r\n                this.advance();\r\n                return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);\r\n            case $LPAREN:\r\n            case $RPAREN:\r\n            case $LBRACE:\r\n            case $RBRACE:\r\n            case $LBRACKET:\r\n            case $RBRACKET:\r\n            case $COMMA:\r\n            case $COLON:\r\n            case $SEMICOLON:\r\n                return this.scanCharacter(start, peek);\r\n            case $SQ:\r\n            case $DQ:\r\n                return this.scanString();\r\n            case $HASH:\r\n                return this.scanOperator(start, StringWrapper.fromCharCode(peek));\r\n            case $PLUS:\r\n            case $MINUS:\r\n            case $STAR:\r\n            case $SLASH:\r\n            case $PERCENT:\r\n            case $CARET:\r\n            case $QUESTION:\r\n                return this.scanOperator(start, StringWrapper.fromCharCode(peek));\r\n            case $LT:\r\n            case $GT:\r\n            case $BANG:\r\n            case $EQ:\r\n                return this.scanComplexOperator(start, $EQ, StringWrapper.fromCharCode(peek), '=');\r\n            case $AMPERSAND:\r\n                return this.scanComplexOperator(start, $AMPERSAND, '&', '&');\r\n            case $BAR:\r\n                return this.scanComplexOperator(start, $BAR, '|', '|');\r\n            case $NBSP:\r\n                while (isWhitespace(this.peek))\r\n                    this.advance();\r\n                return this.scanToken();\r\n        }\r\n        this.error(`Unexpected character [${StringWrapper.fromCharCode(peek)}]`, 0);\r\n        return null;\r\n    }\r\n    scanCharacter(start, code) {\r\n        assert(this.peek == code);\r\n        this.advance();\r\n        return newCharacterToken(start, code);\r\n    }\r\n    scanOperator(start, str) {\r\n        assert(this.peek == StringWrapper.charCodeAt(str, 0));\r\n        assert(SetWrapper.has(OPERATORS, str));\r\n        this.advance();\r\n        return newOperatorToken(start, str);\r\n    }\r\n    scanComplexOperator(start, code, one, two) {\r\n        assert(this.peek == StringWrapper.charCodeAt(one, 0));\r\n        this.advance();\r\n        var str = one;\r\n        while (this.peek == code) {\r\n            this.advance();\r\n            str += two;\r\n        }\r\n        assert(SetWrapper.has(OPERATORS, str));\r\n        return newOperatorToken(start, str);\r\n    }\r\n    scanIdentifier() {\r\n        assert(isIdentifierStart(this.peek));\r\n        var start = this.index;\r\n        this.advance();\r\n        while (isIdentifierPart(this.peek))\r\n            this.advance();\r\n        var str = this.input.substring(start, this.index);\r\n        if (SetWrapper.has(KEYWORDS, str)) {\r\n            return newKeywordToken(start, str);\r\n        }\r\n        else {\r\n            return newIdentifierToken(start, str);\r\n        }\r\n    }\r\n    scanNumber(start) {\r\n        assert(isDigit(this.peek));\r\n        var simple = (this.index === start);\r\n        this.advance(); // Skip initial digit.\r\n        while (true) {\r\n            if (isDigit(this.peek)) {\r\n            }\r\n            else if (this.peek == $PERIOD) {\r\n                simple = false;\r\n            }\r\n            else if (isExponentStart(this.peek)) {\r\n                this.advance();\r\n                if (isExponentSign(this.peek))\r\n                    this.advance();\r\n                if (!isDigit(this.peek))\r\n                    this.error('Invalid exponent', -1);\r\n                simple = false;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            this.advance();\r\n        }\r\n        var str = this.input.substring(start, this.index);\r\n        // TODO\r\n        var value = simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str);\r\n        return newNumberToken(start, value);\r\n    }\r\n    scanString() {\r\n        assert(this.peek == $SQ || this.peek == $DQ);\r\n        var start = this.index;\r\n        var quote = this.peek;\r\n        this.advance(); // Skip initial quote.\r\n        var buffer;\r\n        var marker = this.index;\r\n        var input = this.input;\r\n        while (this.peek != quote) {\r\n            if (this.peek == $BACKSLASH) {\r\n                if (buffer == null)\r\n                    buffer = new StringJoiner();\r\n                buffer.add(input.substring(marker, this.index));\r\n                this.advance();\r\n                var unescapedCode;\r\n                if (this.peek == $u) {\r\n                    // 4 character hex code for unicode character.\r\n                    var hex = input.substring(this.index + 1, this.index + 5);\r\n                    try {\r\n                        unescapedCode = NumberWrapper.parseInt(hex, 16);\r\n                    }\r\n                    catch (e) {\r\n                        this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\r\n                    }\r\n                    for (var i = 0; i < 5; i++) {\r\n                        this.advance();\r\n                    }\r\n                }\r\n                else {\r\n                    unescapedCode = unescape(this.peek);\r\n                    this.advance();\r\n                }\r\n                buffer.add(StringWrapper.fromCharCode(unescapedCode));\r\n                marker = this.index;\r\n            }\r\n            else if (this.peek == $EOF) {\r\n                this.error('Unterminated quote', 0);\r\n            }\r\n            else {\r\n                this.advance();\r\n            }\r\n        }\r\n        var last = input.substring(marker, this.index);\r\n        this.advance(); // Skip terminating quote.\r\n        // Compute the unescaped string value.\r\n        var unescaped = last;\r\n        if (buffer != null) {\r\n            buffer.add(last);\r\n            unescaped = buffer.toString();\r\n        }\r\n        return newStringToken(start, unescaped);\r\n    }\r\n    error(message, offset) {\r\n        var position = this.index + offset;\r\n        throw new ScannerError(`Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\r\n    }\r\n}\r\nfunction isWhitespace(code) {\r\n    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\r\n}\r\nfunction isIdentifierStart(code) {\r\n    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == $$);\r\n}\r\nfunction isIdentifierPart(code) {\r\n    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||\r\n        (code == $_) || (code == $$);\r\n}\r\nfunction isDigit(code) {\r\n    return $0 <= code && code <= $9;\r\n}\r\nfunction isExponentStart(code) {\r\n    return code == $e || code == $E;\r\n}\r\nfunction isExponentSign(code) {\r\n    return code == $MINUS || code == $PLUS;\r\n}\r\nfunction unescape(code) {\r\n    switch (code) {\r\n        case $n:\r\n            return $LF;\r\n        case $f:\r\n            return $FF;\r\n        case $r:\r\n            return $CR;\r\n        case $t:\r\n            return $TAB;\r\n        case $v:\r\n            return $VTAB;\r\n        default:\r\n            return code;\r\n    }\r\n}\r\nvar OPERATORS = SetWrapper.createFromList([\r\n    '+',\r\n    '-',\r\n    '*',\r\n    '/',\r\n    '%',\r\n    '^',\r\n    '=',\r\n    '==',\r\n    '!=',\r\n    '===',\r\n    '!==',\r\n    '<',\r\n    '>',\r\n    '<=',\r\n    '>=',\r\n    '&&',\r\n    '||',\r\n    '&',\r\n    '|',\r\n    '!',\r\n    '?',\r\n    '#'\r\n]);\r\nvar KEYWORDS = SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false']);\r\n//# sourceMappingURL=lexer.js.map"]}