{"version":3,"sources":["locals.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,gEAAoB,UAAS,SAAQ;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG;AAAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,iBAAoB,KAAG,WAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;iBAGY,KAAG;AAL3B,cAAQ,AAAC,0BAAqC,CAAA;AAA9C,eAAA,SAAQ,AAAC;AAMF,eAAM,OAAK,CACF,MAAK,CAAG,CAAA,OAAM,CAAG;AACzB,aAAG,OAAO,EAAI,OAAK,CAAC;AACpB,aAAG,QAAQ,EAAI,QAAM,CAAC;QAC1B;AARM,AAuCV,aAvCiB,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAS1C,iBAAO,CAAP,UAAS,IAAG,CAAG;AACX,eAAI,UAAS,SAAS,AAAC,CAAC,IAAG,QAAQ,CAAG,KAAG,CAAC,CAAG;AACzC,mBAAO,KAAG,CAAC;YACf;AAAA,AACA,eAAI,SAAQ,AAAC,CAAC,IAAG,OAAO,CAAC,CAAG;AACxB,mBAAO,CAAA,IAAG,OAAO,SAAS,AAAC,CAAC,IAAG,CAAC,CAAC;YACrC;AAAA,AACA,iBAAO,MAAI,CAAC;UAChB;AACA,YAAE,CAAF,UAAI,IAAG,CAAG;AACN,eAAI,UAAS,SAAS,AAAC,CAAC,IAAG,QAAQ,CAAG,KAAG,CAAC,CAAG;AACzC,mBAAO,CAAA,UAAS,IAAI,AAAC,CAAC,IAAG,QAAQ,CAAG,KAAG,CAAC,CAAC;YAC7C;AAAA,AACA,eAAI,SAAQ,AAAC,CAAC,IAAG,OAAO,CAAC,CAAG;AACxB,mBAAO,CAAA,IAAG,OAAO,IAAI,AAAC,CAAC,IAAG,CAAC,CAAC;YAChC;AAAA,AACA,gBAAM,IAAI,cAAY,AAAC,EAAC,eAAe,EAAC,KAAG,EAAC,IAAE,EAAC,CAAC;UACpD;AACA,YAAE,CAAF,UAAI,IAAG,CAAG,CAAA,KAAI,CAAG;AAIb,eAAI,UAAS,SAAS,AAAC,CAAC,IAAG,QAAQ,CAAG,KAAG,CAAC,CAAG;AACzC,uBAAS,IAAI,AAAC,CAAC,IAAG,QAAQ,CAAG,KAAG,CAAG,MAAI,CAAC,CAAC;YAC7C,KACK;AACD,kBAAM,IAAI,cAAY,AAAC,CAAC,yDAAwD,CAAC,CAAC;YACtF;AAAA,UACJ;AACA,oBAAU,CAAV,UAAW,AAAC,CAAE;AAAE,qBAAS,YAAY,AAAC,CAAC,IAAG,QAAQ,CAAC,CAAC;UAAE;AAAA,aArCM,CAAC;MACzD,AAAC,EAAC,CAJ0B,CAAA;AAApC,cAAQ,AAAC,kBAAqC,CAAA;IAEf;EAC3B,CAAA;AADI,CAAC,CAAC;AAwCuB","file":"src/change_detection/parser/locals.js","sourceRoot":"/Users/yamaguchi/Desktop/mean-edge/node_modules/angular2/es6/dev/","sourcesContent":["import { isPresent, BaseException } from 'angular2/src/facade/lang';\r\nimport { MapWrapper } from 'angular2/src/facade/collection';\r\n// HACK: workaround for Traceur behavior.\r\n// It expects all transpiled modules to contain this marker.\r\n// TODO: remove this when we no longer use traceur\r\nexport var __esModule = true;\r\nexport class Locals {\r\n    constructor(parent, current) {\r\n        this.parent = parent;\r\n        this.current = current;\r\n    }\r\n    contains(name) {\r\n        if (MapWrapper.contains(this.current, name)) {\r\n            return true;\r\n        }\r\n        if (isPresent(this.parent)) {\r\n            return this.parent.contains(name);\r\n        }\r\n        return false;\r\n    }\r\n    get(name) {\r\n        if (MapWrapper.contains(this.current, name)) {\r\n            return MapWrapper.get(this.current, name);\r\n        }\r\n        if (isPresent(this.parent)) {\r\n            return this.parent.get(name);\r\n        }\r\n        throw new BaseException(`Cannot find '${name}'`);\r\n    }\r\n    set(name, value) {\r\n        // TODO(rado): consider removing this check if we can guarantee this is not\r\n        // exposed to the public API.\r\n        // TODO: vsavkin maybe it should check only the local map\r\n        if (MapWrapper.contains(this.current, name)) {\r\n            MapWrapper.set(this.current, name, value);\r\n        }\r\n        else {\r\n            throw new BaseException('Setting of new keys post-construction is not supported.');\r\n        }\r\n    }\r\n    clearValues() { MapWrapper.clearValues(this.current); }\r\n}\r\n//# sourceMappingURL=locals.js.map"]}