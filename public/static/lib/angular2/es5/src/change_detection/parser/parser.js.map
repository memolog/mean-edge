{"version":3,"sources":["parser.js"],"names":[],"mappings":"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","file":"src/change_detection/parser/parser.js","sourceRoot":"/Users/yamaguchi/Desktop/mean-edge/node_modules/angular2/es6/dev/","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") return Reflect.decorate(decorators, target, key, desc);\r\n    switch (arguments.length) {\r\n        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);\r\n        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);\r\n        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);\r\n    }\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from 'angular2/src/di/decorators';\r\nimport { isBlank, isPresent, BaseException, StringWrapper, RegExpWrapper } from 'angular2/src/facade/lang';\r\nimport { ListWrapper } from 'angular2/src/facade/collection';\r\nimport { Lexer, EOF, $PERIOD, $COLON, $SEMICOLON, $LBRACKET, $RBRACKET, $COMMA, $LBRACE, $RBRACE, $LPAREN, $RPAREN } from './lexer';\r\nimport { reflector, Reflector } from 'angular2/src/reflection/reflection';\r\nimport { EmptyExpr, ImplicitReceiver, AccessMember, LiteralPrimitive, Binary, PrefixNot, Conditional, Pipe, Assignment, Chain, KeyedAccess, LiteralArray, LiteralMap, Interpolation, MethodCall, FunctionCall, TemplateBinding, ASTWithSource } from './ast';\r\n// HACK: workaround for Traceur behavior.\r\n// It expects all transpiled modules to contain this marker.\r\n// TODO: remove this when we no longer use traceur\r\nexport var __esModule = true;\r\nvar _implicitReceiver = new ImplicitReceiver();\r\n// TODO(tbosch): Cannot make this const/final right now because of the transpiler...\r\nvar INTERPOLATION_REGEXP = RegExpWrapper.create('\\\\{\\\\{(.*?)\\\\}\\\\}');\r\nexport let Parser = class {\r\n    constructor(lexer, providedReflector = null) {\r\n        this._lexer = lexer;\r\n        this._reflector = isPresent(providedReflector) ? providedReflector : reflector;\r\n    }\r\n    parseAction(input, location) {\r\n        var tokens = this._lexer.tokenize(input);\r\n        var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();\r\n        return new ASTWithSource(ast, input, location);\r\n    }\r\n    parseBinding(input, location) {\r\n        var tokens = this._lexer.tokenize(input);\r\n        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();\r\n        return new ASTWithSource(ast, input, location);\r\n    }\r\n    addPipes(bindingAst, pipes) {\r\n        if (ListWrapper.isEmpty(pipes))\r\n            return bindingAst;\r\n        var res = ListWrapper.reduce(pipes, (result, currentPipeName) => new Pipe(result, currentPipeName, [], false), bindingAst.ast);\r\n        return new ASTWithSource(res, bindingAst.source, bindingAst.location);\r\n    }\r\n    parseTemplateBindings(input, location) {\r\n        var tokens = this._lexer.tokenize(input);\r\n        return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();\r\n    }\r\n    parseInterpolation(input, location) {\r\n        var parts = StringWrapper.split(input, INTERPOLATION_REGEXP);\r\n        if (parts.length <= 1) {\r\n            return null;\r\n        }\r\n        var strings = [];\r\n        var expressions = [];\r\n        for (var i = 0; i < parts.length; i++) {\r\n            var part = parts[i];\r\n            if (i % 2 === 0) {\r\n                // fixed string\r\n                ListWrapper.push(strings, part);\r\n            }\r\n            else {\r\n                var tokens = this._lexer.tokenize(part);\r\n                var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();\r\n                ListWrapper.push(expressions, ast);\r\n            }\r\n        }\r\n        return new ASTWithSource(new Interpolation(strings, expressions), input, location);\r\n    }\r\n    wrapLiteralPrimitive(input, location) {\r\n        return new ASTWithSource(new LiteralPrimitive(input), input, location);\r\n    }\r\n};\r\nParser = __decorate([\r\n    Injectable(), \r\n    __metadata('design:paramtypes', [Lexer, Reflector])\r\n], Parser);\r\nclass _ParseAST {\r\n    constructor(input, location, tokens, reflector, parseAction) {\r\n        this.input = input;\r\n        this.location = location;\r\n        this.tokens = tokens;\r\n        this.reflector = reflector;\r\n        this.parseAction = parseAction;\r\n        this.index = 0;\r\n    }\r\n    peek(offset) {\r\n        var i = this.index + offset;\r\n        return i < this.tokens.length ? this.tokens[i] : EOF;\r\n    }\r\n    get next() { return this.peek(0); }\r\n    get inputIndex() {\r\n        return (this.index < this.tokens.length) ? this.next.index : this.input.length;\r\n    }\r\n    advance() { this.index++; }\r\n    optionalCharacter(code) {\r\n        if (this.next.isCharacter(code)) {\r\n            this.advance();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    optionalKeywordVar() {\r\n        if (this.peekKeywordVar()) {\r\n            this.advance();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    peekKeywordVar() { return this.next.isKeywordVar() || this.next.isOperator('#'); }\r\n    expectCharacter(code) {\r\n        if (this.optionalCharacter(code))\r\n            return;\r\n        this.error(`Missing expected ${StringWrapper.fromCharCode(code)}`);\r\n    }\r\n    optionalOperator(op) {\r\n        if (this.next.isOperator(op)) {\r\n            this.advance();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    expectOperator(operator) {\r\n        if (this.optionalOperator(operator))\r\n            return;\r\n        this.error(`Missing expected operator ${operator}`);\r\n    }\r\n    expectIdentifierOrKeyword() {\r\n        var n = this.next;\r\n        if (!n.isIdentifier() && !n.isKeyword()) {\r\n            this.error(`Unexpected token ${n}, expected identifier or keyword`);\r\n        }\r\n        this.advance();\r\n        return n.toString();\r\n    }\r\n    expectIdentifierOrKeywordOrString() {\r\n        var n = this.next;\r\n        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\r\n            this.error(`Unexpected token ${n}, expected identifier, keyword, or string`);\r\n        }\r\n        this.advance();\r\n        return n.toString();\r\n    }\r\n    parseChain() {\r\n        var exprs = [];\r\n        while (this.index < this.tokens.length) {\r\n            var expr = this.parsePipe();\r\n            ListWrapper.push(exprs, expr);\r\n            if (this.optionalCharacter($SEMICOLON)) {\r\n                if (!this.parseAction) {\r\n                    this.error(\"Binding expression cannot contain chained expression\");\r\n                }\r\n                while (this.optionalCharacter($SEMICOLON)) {\r\n                } // read all semicolons\r\n            }\r\n            else if (this.index < this.tokens.length) {\r\n                this.error(`Unexpected token '${this.next}'`);\r\n            }\r\n        }\r\n        if (exprs.length == 0)\r\n            return new EmptyExpr();\r\n        if (exprs.length == 1)\r\n            return exprs[0];\r\n        return new Chain(exprs);\r\n    }\r\n    parsePipe() {\r\n        var result = this.parseExpression();\r\n        if (this.optionalOperator(\"|\")) {\r\n            return this.parseInlinedPipe(result);\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    }\r\n    parseExpression() {\r\n        var start = this.inputIndex;\r\n        var result = this.parseConditional();\r\n        while (this.next.isOperator('=')) {\r\n            if (!result.isAssignable) {\r\n                var end = this.inputIndex;\r\n                var expression = this.input.substring(start, end);\r\n                this.error(`Expression ${expression} is not assignable`);\r\n            }\r\n            if (!this.parseAction) {\r\n                this.error(\"Binding expression cannot contain assignments\");\r\n            }\r\n            this.expectOperator('=');\r\n            result = new Assignment(result, this.parseConditional());\r\n        }\r\n        return result;\r\n    }\r\n    parseConditional() {\r\n        var start = this.inputIndex;\r\n        var result = this.parseLogicalOr();\r\n        if (this.optionalOperator('?')) {\r\n            var yes = this.parseExpression();\r\n            if (!this.optionalCharacter($COLON)) {\r\n                var end = this.inputIndex;\r\n                var expression = this.input.substring(start, end);\r\n                this.error(`Conditional expression ${expression} requires all 3 expressions`);\r\n            }\r\n            var no = this.parseExpression();\r\n            return new Conditional(result, yes, no);\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    }\r\n    parseLogicalOr() {\r\n        // '||'\r\n        var result = this.parseLogicalAnd();\r\n        while (this.optionalOperator('||')) {\r\n            result = new Binary('||', result, this.parseLogicalAnd());\r\n        }\r\n        return result;\r\n    }\r\n    parseLogicalAnd() {\r\n        // '&&'\r\n        var result = this.parseEquality();\r\n        while (this.optionalOperator('&&')) {\r\n            result = new Binary('&&', result, this.parseEquality());\r\n        }\r\n        return result;\r\n    }\r\n    parseEquality() {\r\n        // '==','!=','===','!=='\r\n        var result = this.parseRelational();\r\n        while (true) {\r\n            if (this.optionalOperator('==')) {\r\n                result = new Binary('==', result, this.parseRelational());\r\n            }\r\n            else if (this.optionalOperator('===')) {\r\n                result = new Binary('===', result, this.parseRelational());\r\n            }\r\n            else if (this.optionalOperator('!=')) {\r\n                result = new Binary('!=', result, this.parseRelational());\r\n            }\r\n            else if (this.optionalOperator('!==')) {\r\n                result = new Binary('!==', result, this.parseRelational());\r\n            }\r\n            else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n    parseRelational() {\r\n        // '<', '>', '<=', '>='\r\n        var result = this.parseAdditive();\r\n        while (true) {\r\n            if (this.optionalOperator('<')) {\r\n                result = new Binary('<', result, this.parseAdditive());\r\n            }\r\n            else if (this.optionalOperator('>')) {\r\n                result = new Binary('>', result, this.parseAdditive());\r\n            }\r\n            else if (this.optionalOperator('<=')) {\r\n                result = new Binary('<=', result, this.parseAdditive());\r\n            }\r\n            else if (this.optionalOperator('>=')) {\r\n                result = new Binary('>=', result, this.parseAdditive());\r\n            }\r\n            else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n    parseAdditive() {\r\n        // '+', '-'\r\n        var result = this.parseMultiplicative();\r\n        while (true) {\r\n            if (this.optionalOperator('+')) {\r\n                result = new Binary('+', result, this.parseMultiplicative());\r\n            }\r\n            else if (this.optionalOperator('-')) {\r\n                result = new Binary('-', result, this.parseMultiplicative());\r\n            }\r\n            else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n    parseMultiplicative() {\r\n        // '*', '%', '/'\r\n        var result = this.parsePrefix();\r\n        while (true) {\r\n            if (this.optionalOperator('*')) {\r\n                result = new Binary('*', result, this.parsePrefix());\r\n            }\r\n            else if (this.optionalOperator('%')) {\r\n                result = new Binary('%', result, this.parsePrefix());\r\n            }\r\n            else if (this.optionalOperator('/')) {\r\n                result = new Binary('/', result, this.parsePrefix());\r\n            }\r\n            else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n    parsePrefix() {\r\n        if (this.optionalOperator('+')) {\r\n            return this.parsePrefix();\r\n        }\r\n        else if (this.optionalOperator('-')) {\r\n            return new Binary('-', new LiteralPrimitive(0), this.parsePrefix());\r\n        }\r\n        else if (this.optionalOperator('!')) {\r\n            return new PrefixNot(this.parsePrefix());\r\n        }\r\n        else {\r\n            return this.parseCallChain();\r\n        }\r\n    }\r\n    parseCallChain() {\r\n        var result = this.parsePrimary();\r\n        while (true) {\r\n            if (this.optionalCharacter($PERIOD)) {\r\n                result = this.parseAccessMemberOrMethodCall(result);\r\n            }\r\n            else if (this.optionalCharacter($LBRACKET)) {\r\n                var key = this.parseExpression();\r\n                this.expectCharacter($RBRACKET);\r\n                result = new KeyedAccess(result, key);\r\n            }\r\n            else if (this.optionalCharacter($LPAREN)) {\r\n                var args = this.parseCallArguments();\r\n                this.expectCharacter($RPAREN);\r\n                result = new FunctionCall(result, args);\r\n            }\r\n            else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n    parsePrimary() {\r\n        if (this.optionalCharacter($LPAREN)) {\r\n            var result = this.parsePipe();\r\n            this.expectCharacter($RPAREN);\r\n            return result;\r\n        }\r\n        else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(null);\r\n        }\r\n        else if (this.next.isKeywordTrue()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(true);\r\n        }\r\n        else if (this.next.isKeywordFalse()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(false);\r\n        }\r\n        else if (this.optionalCharacter($LBRACKET)) {\r\n            var elements = this.parseExpressionList($RBRACKET);\r\n            this.expectCharacter($RBRACKET);\r\n            return new LiteralArray(elements);\r\n        }\r\n        else if (this.next.isCharacter($LBRACE)) {\r\n            return this.parseLiteralMap();\r\n        }\r\n        else if (this.next.isIdentifier()) {\r\n            return this.parseAccessMemberOrMethodCall(_implicitReceiver);\r\n        }\r\n        else if (this.next.isNumber()) {\r\n            var value = this.next.toNumber();\r\n            this.advance();\r\n            return new LiteralPrimitive(value);\r\n        }\r\n        else if (this.next.isString()) {\r\n            var literalValue = this.next.toString();\r\n            this.advance();\r\n            return new LiteralPrimitive(literalValue);\r\n        }\r\n        else if (this.index >= this.tokens.length) {\r\n            this.error(`Unexpected end of expression: ${this.input}`);\r\n        }\r\n        else {\r\n            this.error(`Unexpected token ${this.next}`);\r\n        }\r\n    }\r\n    parseExpressionList(terminator) {\r\n        var result = [];\r\n        if (!this.next.isCharacter(terminator)) {\r\n            do {\r\n                ListWrapper.push(result, this.parseExpression());\r\n            } while (this.optionalCharacter($COMMA));\r\n        }\r\n        return result;\r\n    }\r\n    parseLiteralMap() {\r\n        var keys = [];\r\n        var values = [];\r\n        this.expectCharacter($LBRACE);\r\n        if (!this.optionalCharacter($RBRACE)) {\r\n            do {\r\n                var key = this.expectIdentifierOrKeywordOrString();\r\n                ListWrapper.push(keys, key);\r\n                this.expectCharacter($COLON);\r\n                ListWrapper.push(values, this.parseExpression());\r\n            } while (this.optionalCharacter($COMMA));\r\n            this.expectCharacter($RBRACE);\r\n        }\r\n        return new LiteralMap(keys, values);\r\n    }\r\n    parseAccessMemberOrMethodCall(receiver) {\r\n        var id = this.expectIdentifierOrKeyword();\r\n        if (this.optionalCharacter($LPAREN)) {\r\n            var args = this.parseCallArguments();\r\n            this.expectCharacter($RPAREN);\r\n            var fn = this.reflector.method(id);\r\n            return new MethodCall(receiver, id, fn, args);\r\n        }\r\n        else {\r\n            var getter = this.reflector.getter(id);\r\n            var setter = this.reflector.setter(id);\r\n            var am = new AccessMember(receiver, id, getter, setter);\r\n            if (this.optionalOperator(\"|\")) {\r\n                return this.parseInlinedPipe(am);\r\n            }\r\n            else {\r\n                return am;\r\n            }\r\n        }\r\n    }\r\n    parseInlinedPipe(result) {\r\n        do {\r\n            if (this.parseAction) {\r\n                this.error(\"Cannot have a pipe in an action expression\");\r\n            }\r\n            var name = this.expectIdentifierOrKeyword();\r\n            var args = ListWrapper.create();\r\n            while (this.optionalCharacter($COLON)) {\r\n                ListWrapper.push(args, this.parseExpression());\r\n            }\r\n            result = new Pipe(result, name, args, true);\r\n        } while (this.optionalOperator(\"|\"));\r\n        return result;\r\n    }\r\n    parseCallArguments() {\r\n        if (this.next.isCharacter($RPAREN))\r\n            return [];\r\n        var positionals = [];\r\n        do {\r\n            ListWrapper.push(positionals, this.parseExpression());\r\n        } while (this.optionalCharacter($COMMA));\r\n        return positionals;\r\n    }\r\n    /**\r\n     * An identifier, a keyword, a string with an optional `-` inbetween.\r\n     */\r\n    expectTemplateBindingKey() {\r\n        var result = '';\r\n        var operatorFound = false;\r\n        do {\r\n            result += this.expectIdentifierOrKeywordOrString();\r\n            operatorFound = this.optionalOperator('-');\r\n            if (operatorFound) {\r\n                result += '-';\r\n            }\r\n        } while (operatorFound);\r\n        return result.toString();\r\n    }\r\n    parseTemplateBindings() {\r\n        var bindings = [];\r\n        while (this.index < this.tokens.length) {\r\n            var keyIsVar = this.optionalKeywordVar();\r\n            var key = this.expectTemplateBindingKey();\r\n            this.optionalCharacter($COLON);\r\n            var name = null;\r\n            var expression = null;\r\n            if (this.next !== EOF) {\r\n                if (keyIsVar) {\r\n                    if (this.optionalOperator(\"=\")) {\r\n                        name = this.expectTemplateBindingKey();\r\n                    }\r\n                    else {\r\n                        name = '\\$implicit';\r\n                    }\r\n                }\r\n                else if (!this.peekKeywordVar()) {\r\n                    var start = this.inputIndex;\r\n                    var ast = this.parsePipe();\r\n                    var source = this.input.substring(start, this.inputIndex);\r\n                    expression = new ASTWithSource(ast, source, this.location);\r\n                }\r\n            }\r\n            ListWrapper.push(bindings, new TemplateBinding(key, keyIsVar, name, expression));\r\n            if (!this.optionalCharacter($SEMICOLON)) {\r\n                this.optionalCharacter($COMMA);\r\n            }\r\n        }\r\n        return bindings;\r\n    }\r\n    error(message, index = null) {\r\n        if (isBlank(index))\r\n            index = this.index;\r\n        var location = (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :\r\n            `at the end of the expression`;\r\n        throw new BaseException(`Parser Error: ${message} ${location} [${this.input}] in ${this.location}`);\r\n    }\r\n}\r\n//# sourceMappingURL=parser.js.map"]}